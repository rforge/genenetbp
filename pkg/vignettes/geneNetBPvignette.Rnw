% \VignetteIndexEntry{An R Package for belief propagation in genotype-phenotype networks}
% \VignetteKeyword{Conditional Gaussian Networks}
% \VignetteKeyword{Probabilistic networks}
% \VignetteKeyword{Graphical Models}
% \VignetteKeyword{Discrete Bayesian Networks}

\documentclass[12pt, a4paper]{article}

\usepackage{Sweave}

% amsmath package, useful for mathematical formulas
\usepackage{amsmath}

%amssymb package, useful for mathematical symbols
\usepackage{amssymb}

%graphicx package, useful for including eps and pdf graphics
% include graphics with the command \includegraphics
\usepackage{graphicx}
\usepackage{epstopdf}

% for urls
\usepackage{hyperref}

% packages for tables
\usepackage{cite}
\usepackage{algorithm}
\usepackage{lineno}
\usepackage{color}
\usepackage{setspace}
%\double-spacing

% bibliography style
\bibliographystyle{plos2009}

%Text layout
\topmargin 0.0cm
\oddsidemargin 0.5cm
\evensidemargin 0.5cm
\textwidth 16cm 
\textheight 21cm


% Bold the 'Figure #' in the caption and separate it with a period
% Captions will be left justified
\usepackage[labelfont=bf,labelsep=period,justification=raggedright]{caption}


\def\pkg#1{\texttt{#1}}
\def\code#1{{\texttt{#1}}}
\def\R{\texttt{R}}


<<echo=FALSE,print=FALSE>>=
require(geneNetBP)
prettyVersion <- packageDescription("geneNetBP")$Version
prettyDate <- format(Sys.Date())
@

% Remove brackets from numbering in List of References
\makeatletter
\renewcommand{\@biblabel}[1]{\quad#1.}
\makeatother

\author{Janhavi Moharil\\ University at Buffalo}
\title{Belief Propagation in Genotype-Phenotype Networks using the \pkg{geneNetBP} package}
\date{\pkg{geneNetBP} version \Sexpr{prettyVersion} as of \Sexpr{prettyDate}}

\begin{document}
\SweaveOpts{concordance=TRUE}
% \SweaveOpts{concordance=FALSE}

\maketitle

\tableofcontents

\section{Introduction}

\noindent The \code{geneNetBP} package leverages belief propagation methods in genotype-phenotype networks inferred from Quantitative Trait Loci (QTL) data. The network structure can be perturbed by absorbing phenotypic evidence and the system-wide effects on the network are quantified in a nodewise manner. The package implements methods specifically to fit Conditional Gaussian Bayesian Network (CG-BN) or Discrete Bayesian Network to QTL data, absorb phenotype evidence and quantify and visualize the changes in network beliefs. For detailed description of methods, refer to our href{http://www.degruyter.com/view/j/sagmb.2016.15.issue-1/sagmb-2015-0058/sagmb-2015-0058.xml?format=INT}{SAGMB} publication. To cite "geneNetBP", use:\\

\code{Janhavi Moharil, Paul May, Daniel P. Gaile, Rachael Hageman Blair (2016). "Belief Propagation in Genotype-Phenotype Networks", Stat Appl Genet Mol Biol, 15(1):39-53.}\\

\noindent For belief propagation in CG-BN, the package makes extensive use of the package \pkg{RHugin} that provides an R interface for the Hugin Decision Engine, a commercial software for building and infering Bayesian belief networks. Note that \pkg{RHugin} is currently not available on CRAN and is hosted on R-Forge. \code{geneNetBP} requires both Hugin and RHugin to be installed. \pkg{RHugin} can be downloaded from \url{http://rhugin.r-forge.r-project.org}. The Hugin Decision Engine can be downloaded from \url{http://www.hugin.com}. Detailed installation instructions of the \code{geneNetBP} package and package dependencies are available on the \href{http://genenetbp.r-forge.r-project.org/}{geneNetBP} project homepage. Please note that \pkg{RHugin} is required for the functioning of CG-BN implementation \code{geneNetBP}. The package \pkg{RHugin} will not automatically load upon loading \code{geneNetBP} package. Please use \code{library(RHugin)} or \code{require(RHugin) to load \pkg{RHugin} before using \code{geneNetBP}}.\\

\noindent For belief propagation in discrete bayesian networks where both the genotypes and phenotypes are categorical data, the structural learning in \code{geneNetBP} version 2.0.0 is implemented using the package \pkg{bnlearn} while belief propagation is implemented using the package \pkg{gRain}. Both the packages are available on CRAN. \code{HuginLite} can also be used to infer networks from discrete data, however the demo version is restricted to 50 states and 500 cases. For larger datasets, the discrete bayesian network learning and inference using functions that implement \pkg{bnlearn} and \pkg{gRain} is recommended.\\
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
\section{Datasets}

\noindent There are 3 datasets provided with this package. 

%% mouse
\subsection{mouse} 
\noindent The \emph{Mus Musculus} Kidney eQTL data (\code{mouse}) was obtained from a F2 inner-cross between inbred MRL/MpJ and SM/J strains of mice \cite{hageman2011uncovering}. The original data consists of 33,872 gene expression traits for 173 males. After linkage analysis and filtering based on location and significance of QTL, the data consists of 14 genes and their SNP markers corresponding to their QTL. Thus the final dataset \code{mouse} is a data frame of 173 observations of 19 variables (5 genotypes - SNP markers and 14 genes - normalized gene expression values).\\

\noindent Load the dataset and view the first 3 observations:

<<dataset,results=verbatim>>=
data(mouse,package="geneNetBP")
head(mouse,n=3)
@

\noindent There are 3 possible genotype states MM (homozygous) denoted by 1, H (heterozygous) by 2 and SS (homozygous) by 3. The genotypes are categorical variables and hence first 5 columns in the data frame \code{mouse} have to be of class factor while the phenotypes are continuous variables with 14 columns in data frame \code{mouse} of class numeric.\\ 

\subsection{hdl} 
\noindent The \emph{Mus Musculus} HDL QTL data (\code{hdl}) was obtained from a F2 inner-cross between inbred MRL/MpJ and SM/J strains of mice \cite{leduc2012}. The original data consists of 33,872 gene expression traits for 280 males and females. After linkage analysis and filtering based on location and significance of QTL, the data consists of 10 phenotypes (9 genes and HDL level) and their 5 SNP markers corresponding to their QTL. Thus the final dataset \code{hdl} is a data frame of 280 observations of 15 variables (5 SNP markers and 10 phenotypes (9 normalized gene expression and HDL levels).\\

\noindent Load the dataset and view the first 3 observations:

<<dataset,results=verbatim>>=
data(mouse,package="geneNetBP")
head(mouse,n=3)
@

\noindent Note that there are 3 possible genotype states MM (homozygous) denoted by 1, H (heterozygous) by 2 and SS (homozygous) by 3. 

%% toy
\subsection{toy} 
\noindent The \code{toy} is a simulated eQTL dataset from the network shown below, of 500 observations, 3 genotypes (Q1,Q2,Q3) each having 2 possible states and 6 phenotypes, X1-X6.  \\

\begin{figure}[H]
  \centering
  \includegraphics[trim=0 450 300 80,clip,height=6cm,width=6cm]{toy_graph}
  \caption{Toy network example.}
\end{figure}

%% yeast
\subsection{yeast}

\noindent The \code{yeast} dataset is a subset of the widely studied yeast expression dataset comprising of 112 F1 segregants from a cross between BY4716 and RM11-1a strains of \emph{Saccharomyces Cerevisiae} \cite{kruglak2005, kruglak2005nature}. The original dataset consists of expression values reported as log2(sample/ BY reference) for 6216 genes. The data can be accessed in Gene Expression Omnibus (GEO) by accession number (GSE1990). After linkage analysis and filtering based on location and significance of QTL, a final set of 25 genes and their corresponding 12 SNP markers were identified and included in the yeast dataset.\\ 

\noindent Thus the final dataset \code{yeast} is a data frame of 112 observations of 25 variables (9 SNP markers and 16 genes - normalized gene expression values).\\

\noindent Load the dataset and view the first 3 observations:

<<dataset,results=verbatim,eval=FALSE>>=
data(yeast,package="geneNetBP")
head(yeast,n=3)
@

\noindent Note that there are 2 possible genotype states denoted by 1 and 2. The genotypes are categorical variables and hence all genotype columns in data frame \code{yeast} have to be of class factor. The phenotypes are continuous variables and phenotype columns in data frame \code{yeast} of class numeric.\\ 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Infering network structure}
% CG-BN
\subsection{Fit CG-BN to QTL data}
% Model
\subsubsection{Model}
\noindent The graphical model is represented by a Directed Acyclic Graph (DAG). The nodes in the graph represent the model variables, which may be discrete (QTL) or continuous (phenotypes). The phenotypes (e.g., metabolites, gene-expression, or clinical traits etc) are assumed to be continuous and follow a normal distribution.  The data consists of $n$ phenotypes ($X$) and $m$ genotypes at Single Nucleotide Polymorphism (SNP) markers and is defined as: $D=\{X_1, \ldots, X_n, Q_1, \ldots, Q_m\}$.  \\

\noindent Model Assumptions:\\

\noindent 1. Discrete variables precede the continuous variables.\\  
\noindent 2. No relationships between discrete variables (no edges between them).\\

\noindent Local relationships between continuous child nodes and parents are described using Homogeneous Conditional Gaussian Models (HCGM).  The conditional distribution for a phenotype $Y=X_j$ with discrete parent $Q_i$ with genotype states ($g$) and continuous parent $X_i$ ($i\neq j$) is modeled as:
  \begin{equation} 
P\left(Y \mid  Q_i={g}, X_i = x_i \right)=N\left(\alpha(g) + \beta(g)^{T}x_i, \gamma(g) \right),  \label{eq:local}
\end{equation}
where the mean is a regression that depends on both discrete and continuous parents, but the variance depends only on the discrete parents (genotype states).  The parameters of the CG-BN and subsequently the marginal distributions are inferred from the data under the constraints of the topology and the Markov condition using the PC-algorithm in \pkg{RHugin} package.\\  

%Example
\subsubsection{Mouse kidney eQTL Example}

\noindent We will use the function \code{fit.gnbp} to learn the structure of a genotype-phenotype network from \code{mouse} dataset. This function uses the PC algorithm and the EM algorithm implemented in the \pkg{RHugin} package to learn the network structure and and the conditional probability tables for each node in the network. You will need both HuginLite and \pkg{RHugin} installed. Please refer to Section 1 for installation instructions.\\

We will first load the \code{mouse} dataset and extract the genotype and phenotype data.The first five columns are genotype (categorical) and the remaining 14 columns are phenotypes (continuous).
<<A,eval=FALSE>>=
data(mouse,package=geneNetBP)
mousegeno<-mouse[,1:5]
mousepheno<-mouse[,6:19]
@

\noindent The simplest example of fitting a CG-BN to mouse QTL data is as follows. This example uses default parameters.\\

\begin{Schunk}
\begin{Sinput}
>data(mouse)
> fit.gnbp(mousegeno,mousepheno)
\end{Sinput}
\begin{Soutput}
$gp
A Hugin domain: there are 19 nodes and 17 edges


$gp_nodes
node      class     levels type   
[1,] "Cyp4a31" "numeric" "0"    "pheno"
[2,] "Slc5a9"  "numeric" "0"    "pheno"
[3,] "Slc6a9"  "numeric" "0"    "pheno"
[4,] "Hmgcl"   "numeric" "0"    "pheno"
[5,] "Ptp4a2"  "numeric" "0"    "pheno"
[6,] "Ak2"     "numeric" "0"    "pheno"
[7,] "Zbtb8a"  "numeric" "0"    "pheno"
[8,] "Stx12"   "numeric" "0"    "pheno"
[9,] "Trspap1" "numeric" "0"    "pheno"
[10,] "Mecr"    "numeric" "0"    "pheno"
[11,] "Wdtc1"   "numeric" "0"    "pheno"
[12,] "Atpif1"  "numeric" "0"    "pheno"
[13,] "Rbbp4"   "numeric" "0"    "pheno"
[14,] "Tlr12"   "numeric" "0"    "pheno"
[15,] "Qchr4"   "factor"  "3"    "geno" 
[16,] "Qchr17"  "factor"  "3"    "geno" 
[17,] "Qchr15"  "factor"  "3"    "geno" 
[18,] "Qchr11"  "factor"  "3"    "geno" 
[19,] "Qchr2"   "factor"  "3"    "geno" 

$gp_flag
[1] "cg"

attr(,"class")
[1] "gpfit"

\end{Soutput}
\end{Schunk}

\noindent The learnt network structure is returned as RHugin domain in the first element \code{gp} of the list. RHugin domain is an external pointer and hence cannot be saved in R workspace. The \pkg{RHugin} package provides functions \code{read.rhd} and \code{write.rhd} for loading and saving Hugin domains. The domains that are not saved will be lost when quitting R. The use of assignment operator such as <- or = will only return the pointer.Refer to the RHugin help manual for more information.The other elements in the list are for internal use with other functions. \\

\noindent The inferred network structure is very sensitive to the significance level (specified as \code{alpha}) and hence it is recommended to try out different values of the argument \code{alpha}. Note that the argument \code{alpha} is for use with RHugin package i.e. the function \code{fit.gnbp} will pass on \code{alpha} to RHugin functions.For example,

\begin{Schunk}
\begin{Sinput}
> fit.gnbp(mousegeno,mousepheno,alpha = 0.1)
\end{Sinput}
\begin{Soutput}
$gp
A Hugin domain: there are 19 nodes and 31 edges


$gp_nodes
node      class     levels type   
[1,] "Cyp4a31" "numeric" "0"    "pheno"
[2,] "Slc5a9"  "numeric" "0"    "pheno"
[3,] "Slc6a9"  "numeric" "0"    "pheno"
[4,] "Hmgcl"   "numeric" "0"    "pheno"
[5,] "Ptp4a2"  "numeric" "0"    "pheno"
[6,] "Ak2"     "numeric" "0"    "pheno"
[7,] "Zbtb8a"  "numeric" "0"    "pheno"
[8,] "Stx12"   "numeric" "0"    "pheno"
[9,] "Trspap1" "numeric" "0"    "pheno"
[10,] "Mecr"    "numeric" "0"    "pheno"
[11,] "Wdtc1"   "numeric" "0"    "pheno"
[12,] "Atpif1"  "numeric" "0"    "pheno"
[13,] "Rbbp4"   "numeric" "0"    "pheno"
[14,] "Tlr12"   "numeric" "0"    "pheno"
[15,] "Qchr4"   "factor"  "3"    "geno" 
[16,] "Qchr17"  "factor"  "3"    "geno" 
[17,] "Qchr15"  "factor"  "3"    "geno" 
[18,] "Qchr11"  "factor"  "3"    "geno" 
[19,] "Qchr2"   "factor"  "3"    "geno" 

$gp_flag
[1] "cg"

attr(,"class")
[1] "gpfit"
\end{Soutput}
\end{Schunk}

\noindent The inferred network structure can be visualized by the generic plot method for objects of class "gpfit".

\begin{center}
<<B,fig=FALSE,eval=FALSE>>=
network<-fit.gnbp(mousegeno,mousepheno,alpha = 0.1)
## plot method for graph objects
plot(network) 
@
\end{center}

\begin{figure}[H]
\centering 
\includegraphics{mouse_graph}
\caption{Conditional Gaussian network learnt from mouse kidney eQTL data}
\end{figure} 

\noindent The genotypes are represented by boxes and the phenotypes are represented by elliptical nodes. Notice that the network now has 31 edges.Also, Qchr17 and Qchr2 are not included in the network. Any additional domain knowledge can be provided through a list of constraints. More help about the structure of the constraints list can be found in RHugin documentation.\\


%Discrete Bayesian Network
\subsection{Fit a Discrete Bayesian Network to QTL data}
\subsubsection{Model}
\noindent The model for a Discrete Bayesian Network is very similar to the CG-BN. The graphical model is still represented by a Directed Acyclic Graph (DAG). The QTL variables are discrete. The \bold{phenotypes} however are also \bold{discrete} and not continuous unlike in the CG-BN representation. The data consists of $n$ phenotypes ($X$) and $m$ genotypes at Single Nucleotide Polymorphism (SNP) markers and is defined as: $D=\{X_1, \ldots, X_n, Q_1, \ldots, Q_m\}$.  \\

\noindent Model Assumptions are restated as:
\noindent 1. Genotypes precede the phenotypes.\\  
\noindent 2. No relationships between genotypes (no edges between them).\\

\subsubsection{Yeast Example}

\noindent A discrete bayesian network can be learnt using 2 approaches. First one is by using \code{fit.gnbp} that implements the PC algorithm as described above. 

We will first load the \code{yeast} dataset and extract the genotype and phenotype data as before.The first 9 columns are genotypes (categorical) and the next 16 columns are phenotypes (continuous).

<<dataset,results=hide>>=
data(yeast,package="geneNetBP")
yeastgeno<-yeast[,1:9]
yeastpheno<-yeast[,10:25]
@

Since the phenotypes are continuous, we will discretize the data around the median.

<<D,results=hide,eval=TRUE>>=
yeastpheno_dis<-yeastpheno
for (i in 1:dim(yeastpheno)[2])
{
  yeastpheno_dis[which(yeastpheno[,i]>=median(yeastpheno[,i])),i]<-"1"
  yeastpheno_dis[which(yeastpheno[,i]<median(yeastpheno[,i])),i]<-"-1"
  yeastpheno_dis[,i]<-as.factor(yeastpheno_dis[,i])
}
@

\noindent A discrete bayesian network can be learnt using \code{fit.gnbp} by setting \code{type = "db"}.

<<E,eval=FALSE>>=
yeast.gnbp<-fit.gnbp(yeastgeno, yeastpheno_dis,type="db",alpha=0.1)
@

The RHugin pointer to the inferred network structure is returned in the variable \code{gp} of the list. It consists of 25 nodes and 14 edges. Here is a plot of the network structure.

<<E1,eval=FALSE>>=
plot(yeast.gnbp)
@

\begin{figure}[H]
\centering 
\includegraphics{yeast.gnbp}
\caption{Discrete Bayesian Network learnt from Yeast data using (\code{fit.gnbp})}
\end{figure} 

The second approach to infer the network structure is by using \code{fit.dbn} that can implement several score-based and constraint-based learning methods from the package \pkg{bnlearn}. The default method is \emph{Hill-Climbing} (\code{method = "hc"}).

<<F,results=verbatim,eval=FALSE>>=
yeast.dbn<-fit.dbn(yeastgeno,yeastpheno_dis)
@

\begin{center}
<<F1,figs.only=TRUE,eval=FALSE>>=
plot(yeast.dbn)
@
\end{center}

\code{fit.dbn} return an object of class \code{dbnfit which is a list several elements. The inferred network is returned as a "bn.fit" object in \code{$dbn} variable of the list.

To choose a different method, specify \code{method}. For example, to fit the network by \emph{Grow-Shrink} method,

\begin{center}
<<G,figs.only=TRUE,eval=FALSE>>=
yeast.dbn<-fit.dbn(yeastgeno,yeastpheno_dis,method="gs")
plot(yeast.dbn)
@
\end{center}

%CPT Tables
\subsection(Extracting Conditional Probability Distributions)
In both CG-BN and discrete Bayesian networks, there are conditional probability tables associated with each node in the network. The marginal distributions are returned in the second element \code{marginal} of the list in both \code{dbnfit} and \code{gpfit} objects. 

\noindent In addition, the conditional distributions can also be accessed by using the package specific functions. For example, \code{get.marginal} from the package \pkg{RHugin} can be used to compute the marginal distributions in an RHugin domain. Another useful function is \code{get.table} to extract the CPT, experience or fading table associated with any node in an RHugin domain. Please refer to \pkg{RHugin} manual for more help on these functions.  

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Absorbing evidence and Network Comparison}
\subsection{Conditional Gaussian Bayesian Networks}  
\subsubsection{Belief propagation}
\noindent in CG-BN, new evidence can be entered by setting phenotypes in the network to a particular value, $X_i = x_i^{*}$.  The evidence can pertain to a single node or multiple nodes in the network.\\

\noindent Through message passing, the probability distributions are updated (called as beliefs) after taking into account new evidence. Updated beliefs for discrete nodes (genotypes) are simply updated estimated frequencies under the new evidence. For continuous nodes (phenotypes), the updated beliefs are in terms of revised parameters for the Gaussian distribution. The original and absorbed network are compared node-wise by quantifying the change in marginals.\\  

\subsubsection{Jeffrey's Signed Information (JSI)}

\noindent A symmetric version of the Kullback-Leibler information, known as Jeffrey's information is calculated to compare the marginal belief in the original network $X_i^{\rm 0} \sim N( \mu_0, \sigma_0^2)$ to the absorbed network $X_i^{\rm abs} \sim N( \mu_{\rm abs}, \sigma_{\rm abs}^2)$.  Jeffrey's information, which is computed for all continuous unabsorbed nodes in the network,  is given as: 
  \[ J \left( X_{i}^{\rm 0}, X_{i}^{\rm abs} \right) = I^{\rm KL}\left( X_{i}^{\rm 0}, X_{i}^{\rm abs} \right)  + I^{\rm KL}\left( X_{i}^{\rm abs}, X_{i}^{\rm 0} \right)   \]
where
\[ I^{\rm KL}\left( X_{i}^{\rm 0}, X_{i}^{\rm abs} \right) =  \frac{1}{2}  \left\{ \frac{(\mu_0 - \mu_{\rm abs})^2}{\sigma_0^2} + \frac{\sigma_0^2}{\sigma_{\rm abs}^2} - \log\left( \frac{\sigma_0^2}{\sigma_{\rm abs}^2} \right) - 1 \right\}. \]
For ease of interpretation, the signed Jeffrey's information
\[\rm{sign}(\mu_0-\mu_{\rm{abs}})\cdot   J\left( X_{i}^{\rm 0}, X_{i}^{\rm abs} \right)\]
is used to demonstrate the direction of change after the absorption of evidence.\\  

\noindent The changes in belief are measured only for the nodes that are \emph{d}-connected (conditionally dependent) to the entered evidence. Nodes that are \emph{d}-separated from absorbed evidence are not influenced, and, consequently, do not change beliefs.\\

\subsubsection{Mouse Kidney eQTL Example}

We know that the marginal mean of the node \code{Tlr12} is -0.99 (see \code{$marginal) in section 3.1.2) and we wish to enter this new information in the mouse network and compute the updated states of other nodes. New evidence for single or multiple nodes can be entered using the function \code{absorb.gnbp} which absorbs evidence and propagates the beliefs. The input to \code{absorb.gnbp} is an object of class \code{gpfit}, that is the output returned by the function \code{fit.gnbp}.

\noindent The function \code{absorb.gnbp} uses the \pkg{RHugin} package to absorb the evidence in the specified nodes and update the beliefs of all nodes and then calculates Jeffrey's signed information for all \code{d}-connected nodes. The following example illustrates how to absorb evidence in a genotype-phenotype network. \\

\noindent 1. Absorb a single evidence for a single node

\begin{Schunk}
\begin{Sinput}
> mouse.cgbn<-fit.gnbp(mousegeno,mousepheno,alpha=0.1)
> ## Absorb evidence
> absorb.gnbp(mouse.cgbn,node="Tlr12",evidence=matrix(-0.99))
\end{Sinput}
\begin{Soutput}
$gp
A Hugin domain: there are 19 nodes and 31 edges


$gp_flag
[1] "cg"

$gp_nodes
node      class     levels type   
[1,] "Cyp4a31" "numeric" "0"    "pheno"
[2,] "Slc5a9"  "numeric" "0"    "pheno"
[3,] "Slc6a9"  "numeric" "0"    "pheno"
[4,] "Hmgcl"   "numeric" "0"    "pheno"
[5,] "Ptp4a2"  "numeric" "0"    "pheno"
[6,] "Ak2"     "numeric" "0"    "pheno"
[7,] "Zbtb8a"  "numeric" "0"    "pheno"
[8,] "Stx12"   "numeric" "0"    "pheno"
[9,] "Trspap1" "numeric" "0"    "pheno"
[10,] "Mecr"    "numeric" "0"    "pheno"
[11,] "Wdtc1"   "numeric" "0"    "pheno"
[12,] "Atpif1"  "numeric" "0"    "pheno"
[13,] "Rbbp4"   "numeric" "0"    "pheno"
[14,] "Tlr12"   "numeric" "0"    "pheno"
[15,] "Qchr4"   "factor"  "3"    "geno" 
[16,] "Qchr17"  "factor"  "3"    "geno" 
[17,] "Qchr15"  "factor"  "3"    "geno" 
[18,] "Qchr11"  "factor"  "3"    "geno" 
[19,] "Qchr2"   "factor"  "3"    "geno" 

$evidence
[,1]
[1,] -0.99

$node
[1] "Tlr12"

$marginal
$marginal$pheno
$marginal$pheno$mean
[,1]
Rbbp4    2.317482e-17
Atpif1   2.190113e-03
Wdtc1    2.514671e-17
Mecr    -1.551256e-16
Trspap1  4.239712e-03
Stx12    4.433032e-17
Zbtb8a  -2.003327e-17
Ak2     -7.153821e-03
Ptp4a2   3.519799e-03
Hmgcl   -7.136515e-03
Slc6a9  -1.957688e-02
Slc5a9   2.471620e-02
Cyp4a31  1.914642e-02

$marginal$pheno$var
[,1]
Rbbp4   0.9557443
Atpif1  0.9027874
Wdtc1   0.9574396
Mecr    0.9550281
Trspap1 0.8530483
Stx12   0.9575380
Zbtb8a  0.9551227
Ak2     0.7696464
Ptp4a2  0.8550665
Hmgcl   0.8509102
Slc6a9  0.7939058
Slc5a9  0.8538129
Cyp4a31 0.8965621


$marginal$geno
$marginal$geno$freq
state1    state2   state3
Qchr4 0.2312139 0.4682081 0.300578



$belief
$belief$pheno
$belief$pheno$mean
[,1]
Rbbp4    0.8776457
Atpif1  -0.6538109
Wdtc1    0.6669131
Mecr    -0.8791569
Trspap1 -0.6613503
Stx12    0.8676931
Zbtb8a  -0.1222389
Ak2      0.6720433
Ptp4a2  -0.6969352
Hmgcl    0.6855139
Slc6a9   0.5667517
Slc5a9  -0.6510656
Cyp4a31 -0.5043484

$belief$pheno$var
[,1]
Rbbp4   0.4859803
Atpif1  0.6226163
Wdtc1   0.6627283
Mecr    0.4428854
Trspap1 0.5679888
Stx12   0.4933635
Zbtb8a  0.8083572
Ak2     0.5327134
Ptp4a2  0.5448964
Hmgcl   0.5628789
Slc6a9  0.5718937
Slc5a9  0.5254673
Cyp4a31 0.6995273


$belief$geno
$belief$geno$state1
[,1]
Qchr4 0.007944801

$belief$geno$state2
[,1]
Qchr4 0.2152284

$belief$geno$state3
[,1]
Qchr4 0.7768268



$JSI
[,1]
Rbbp4    0.71650239
Atpif1  -0.32687548
Wdtc1    0.31813768
Mecr    -0.79365404
Trspap1 -0.36674950
Stx12    0.69209864
Zbtb8a  -0.01550701
Ak2      0.40056441
Ptp4a2  -0.42017671
Hmgcl    0.39734466
Slc6a9   0.28567820
Slc5a9  -0.41106696
Cyp4a31 -0.18983139

$FC
NULL

attr(,"class")
[1] "gnbp"
\end{Soutput}
\end{Schunk}

\noindent Note that the function \code{absorb.gnbp} requires the argument \code{evidence} to be of class matrix. If only a single value of evidence is to be entered, this can be done by simply using the function matrix(), as above.\\

\noindent \code{absorb.gnbp} returns an object of class "gnbp" which is a list of several variables. \\

\noindent The Jeffrey's signed information is returned as a matrix \code{JSI} that gives the quantified comparison of beliefs of the continuous nodes (phenotypes) before and after evidence absorption. Note that since we absorbed only a single value of evidence, \code {JSI} is a column vector.In addition to Jeffrey's signed information, the marginal distributions (mean and variance for continuous nodes in and genotype frequencies for SNP markers) before evidence absorption and the updated beliefs (after evidence absorption) are also returned.\\ 

\noindent Since Qchr15 is \code{d}-separated when evidence is absorbed in \code{Tlr12}, it's marginal distribution is not affected and hence the beliefs are not calculated. Qchr4, on the other hand is \code{d}-connected and a list returns the updated frequencies of all 3 genotype states of the SNP marker Qchr15.\\ 

\noindent 2. Absorb a sequence of evidence for a single node

\begin{Schunk}
\begin{Sinput}
> mouse.cgbn<-fit.gnbp(mousegeno,mousepheno,alpha=0.1)
> ##Absorb evidence
> absorb.gnbp(mouse.cgbn,node="Tlr12",evidence=t(matrix(c(2.5,3,3.5,4))))
\end{Sinput}
\end{Schunk}


\noindent A function \code{gen.evidence} is useful to generate evidence for a node based on it's marginal distribution. This is particularly useful when network perturbation to assess the network behaviour is of interest.\\

\noindent To generate a spectrum of evidence for \code{Tlr12} within $\pm$$2$ standard deviations of it's marginal distribution, we input the inferred network to \code{gen.evidence}\\

\begin{Schunk}
\begin{Sinput}
> mouse.cgbn<-fit.gnbp(mousegeno,mousepheno,alpha = 0.1)
> ##Generate evidence
> ev<-gen.evidence(mouse.cgbn,node="Tlr12",std=2,length.out=20)
> ##absorb evidence
> absorb.gnbp(mouse.cgbn,node="Tlr12",evidence=ev)
\end{Sinput}
\end{Schunk}

Note that \code{JSI} will now be a matrix whose number of rows are the \emph{d}-connected phenotype nodes to \code{Tlr12} and the number of columns is the length of evidence absorbed in \code{Tlr12}.\\

When a sequence of evidence is absorbed for a single node in the network, \code{absorb.gnbp} also plots the JSI of the \emph{d}-connected nodes vs the evidence absorbed.\\ 

\begin{figure}[H]
\centering 
\includegraphics{mouse_tlr12_evidence}
\caption{Plot produced by \code{absorb.gnbp}}
\end{figure} 

\subsection(Discrete Bayesian Networks)

\subsubsection(Belief propagation & Fold change (FC))
\noindent In Discrete Bayesian Networks, phenotype nodes are represented as $\{X_1, X_2, \ldots, X_p \}$. A node $X_i$, has the states, $X_i \in \{s_1, s_2, \ldots, s_n\}$, where $\sum_{k=1}^n s_k = 1$.  Let $X_{i}^0 = \{s_1^0, s_2^0, \ldots s_n^0\}$ denote the states of $X_i$ in the initial network, and $X_{i}^{pert} \in \{s_1^{pert}, s_2^{pert}, \ldots s_n^{pert}\}$ denotes the states of $X_i$ in the perturbed network. \\

\noindent The node-wise change in marginals is quantified simply by the Fold Change (FC) as a measure of effect size for the state of maximal probability in the perturbed network.  Let $I^{*}$ be an indicator for the state of $X_{i}^{pert}$ with maximum probability.  That is, $I^*=1$ if $s_k^{pert} = \max P(s_k^{pert})$, and $0$ otherwise.  The node-wise change in marginals is:  
\[FC(X_i)  = I^*\cdot\frac{P(s_k^{pert})}{P(s_k^{0})}. \]

\noindent Note that $FC\in [0,1)$ when the node is inhibited, $FC = 1$ when the node stays the same, and $FC > 1$ when the node is activated.\\

\subsubsection{Yeast example}

Consider the yeast network inferred in section 3.2. The phenotypes are discrete variables with 2 states (1,-1) in \code{Yeast} dataset. Like fit methods, there are two ways to absorb the phenotypic evidence in discrete bayesian networks, the function \code{absorb.dbn} that implements \pkg{gRain} or \code{absorb.gnbp} that implements \pkg{RHugin}. 


\subsubsubsection{absorb.dbn} 

<<I,eval=FALSE>>=
## Fit the network
yeast.dbn<-fit.dbn(yeastgeno,yeastpheno_dis)
##Absorb evidence
yeast.dbn.abs<-absorb.dbn(yeast.dbn,"COX10",matrix(c("1","-1"),ncol=2))
@




\subsubsubsection{absorb.gnbp} 

Like previously mentions, \code{absorb.gnbp} can be used with objects of class \code{gpfit} that are output from \code{fit.gnbp}. 

<<H,eval=FALSE>>=
## Fit the network
yeast.gnbp<-fit.gnbp(yeastgeno,yeastpheno_dis,type="db",alpha=0.1)
##Absorb evidence
yeast.gnbp.abs<-absorb.gnbp(yeast.gnbp,"COX10",matrix(c("1")))
@





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Visualizing network changes}

\noindent A generic plot method for plotting the genotype-phenotype network in which evidence has been absorbed and propagated is available. It is important to note that the input to this plot method is an object of class "gnbp". The plot method will convert the RHugin domain into an object of class "graphNEL" by using Rgraphviz package. The argument nodeAttrs to plot method for graph objects in Rgraphviz package is then used to customize the plot. \\

\subsection{A complete example}

\noindent A complete example that fits a network, absorbs evidence and plots the network:\\

\begin{Schunk}
\begin{Sinput}
> network<-fit.gnbp(mousegeno,mousepheno,alpha=0.1)
> network<-absorb.gnbp(network,node="Tlr12",evidence=matrix(-0.99))
> plot(x=network)
\end{Sinput}
\end{Schunk}

\begin{figure}[H]
\centering 
\includegraphics{mouse_network_tlr12}
\caption{Evidence absorption in single node}
\end{figure} 

\noindent The plot method will draw the network with Jeffrey's signed information mapped onto it by a colormap. There is an option to plot beliefs (updated marginal means) which can be entered through the argument y (see help for \code{plot.gnbp}).\\

\noindent The \code{d}-separated nodes are white while the colored nodes are \code{d}-connected, with the color indicating the strength and direction of change . By default, the continuous nodes are of shape "ellipse" and a "box" shape is used for discrete nodes. The node for which evidence is absorbed is colored green (default color).\\

\subsection{Plot options}

\noindent Colormap options such as end colors for the positive and negative gradients and the resolution of the colormap can be customized. The resolution of the colormap can be specified by \code{col.length}. The argument \code{col.palette} can be used to specify the end colors.\\ 

\begin{Schunk}
\begin{Sinput}
> col.palette<-list(pos_high="darkgreen", pos_low= "palegreen2", 
                   neg_high="wheat1", neg_low = "red",
                   dsep_col="white",qtl_col="grey",node_abs_col="yellow") 
> plot(x=network,col.palette=col.palette)
\end{Sinput}
\end{Schunk}

\begin{figure}[H]
\centering 
\includegraphics{mouse_network_tlr12_colpalette}
\caption{Mouse network with custom color palette}
\end{figure} 

\noindent The plot method will always map the JSI or beliefs onto the network for a single piece of evidence. Incase a spectrum of evidence is absorbed for a single/multiple node(s), then the evidence for which we wish to visualize the network changes can be chosen by specifying the corresponding column number of JSI or belief matrix through the argument \code{ncol}.\\

\noindent For example we absorbed a sequence of evidence for \code{Tlr12} and we wish to visualize the belief changes for evidence = 1.767, we can do this as follows.\\

\begin{Schunk}
\begin{Sinput}
> network<-fit.gnbp(mousegeno,mousepheno,alpha = 0.1)
> ##Generate evidence
> evidence<-gen.evidence(network,node="Tlr12",std=2,length.out=20)
> network<-absorb.gnbp(network,node="Tlr12",evidence=evidence)
> plot(x=network,y="belief",ncol=20)
\end{Sinput}
\end{Schunk}

\section{Belief propagation in known networks}

\noindent Belief propagation can be implemented in known genotype-phenotype networks. If the network structure is known apriori from a knowledge database, then learning step can be skipped in \code{fit.gnbp} by seting \code{learn = FALSE}. The conditional probabilities will still need to be learnt. This section demonstrates how to specify known networks and subsequent belief propagation. \\

\subsection{Specifying edges, Toy example}
Suppose the interactions between the variables in the \code{toy} dataset are known. There are two ways to enter this network structure in the fit methods: 1.specify a list of edges or 2. input a graph structure of class "graphNEL". In this section we will use the first approach with \code{fit.gnbp}

\noindent First create a data frame of known edges from parent to child.\\ 

<<I,results=hide,eval=FALSE>>=
  ## Load the toy dataset
  data(toy)
## Create a matrix of edges ("from (parent)", "to (child)")
edgelist=data.frame(matrix(NA,ncol=2,nrow=10))
edgelist[1,]<-cbind("Q1","X1")
edgelist[2,]<-cbind("Q2","X1")
edgelist[3,]<-cbind("Q2","X2")
edgelist[4,]<-cbind("Q2","X4")
edgelist[5,]<-cbind("X1","X2")
edgelist[6,]<-cbind("Q3","X2")
edgelist[7,]<-cbind("Q3","X3")
edgelist[8,]<-cbind("X2","X5")
edgelist[9,]<-cbind("X2","X6")
edgelist[10,]<-cbind("X4","X6")
## label the columns
colnames(edgelist)<-c("from","to")
@
  
  \noindent In \code{fit.gnbp} provide the edgelist by setting \code{graph=edgelist} and set \code{learn = FALSE}. This will skip the learning and only conditional probabilities will be calculated for each node in the network based on the given network structure and data. Absorbing evidence and propagating the beliefs subsequently is then straightforward.\\


\begin{Schunk}
\begin{Sinput}
> network<-fit.gnbp(toygeno,toypheno,learn=FALSE,edgelist=edgelist)
> ##Generate evidence
> evidence<-gen.evidence(network,node="X2",std=2,length.out=20)
> network<-absorb.gnbp(network,node="X2",evidence=evidence)
> plot(x=network,y="JSI",ncol=17,fontsize = 5)
\end{Sinput}
\end{Schunk}

\begin{figure}[H]
\centering 
\includegraphics{toy_network_belief}
\caption{Belief propagation in known network}
\end{figure}

%HDL example
\subsection{Specifying graphNEL objects, HDL Example)}
 
A graph structure can also be directly input to both the fit methods. If additional biological information is known, that can also be provided as \code{constraints} in \code{fit.gnbp} and as \code{whitelist} and \code{blacklist} in \code{fit.dbn}. The following example illustrates this using the \code{fit.dbn} function to fit a discrete bayesian network to HDL data.

First we will fit a CG-BN to \code{hdl} data using\code{fit.gnbp}.

<<J,eval=FALSE>>=
## load data
data(hdl)
##get the genotype and phenotype data
hdlgeno<-hdl[,1:5]
hdlpheno<-hdl[,6:15]
## discretize the data around median
hdlpheno_dis<-hdlpheno
for (i in 1:dim(hdlpheno)[2])
{
  hdlpheno_dis[which(hdlpheno[,i]>=median(hdlpheno[,i])),i]<-"1"
  hdlpheno_dis[which(hdlpheno[,i]<median(hdlpheno[,i])),i]<-"-1"
  hdlpheno_dis[,i]<-as.factor(hdlpheno_dis[,i])
}


@





% References
\bibliography{newbib02}

\end{document}

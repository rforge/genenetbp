% \VignetteIndexEntry{An R Package for belief propagation in genotype-phenotype networks}
% \VignetteKeyword{Conditional Gaussian Networks}
% \VignetteKeyword{Probabilistic networks}
% \VignetteKeyword{Graphical Models}
% \VignetteKeyword{Discrete Bayesian Networks}

\documentclass[12pt, a4paper]{article}

\usepackage{Sweave}

% amsmath package, useful for mathematical formulas
\usepackage{amsmath}

%amssymb package, useful for mathematical symbols
\usepackage{amssymb}

%graphicx package, useful for including eps and pdf graphics
% include graphics with the command \includegraphics
\usepackage{graphicx}
\usepackage{epstopdf}

% for urls
\usepackage{hyperref}

% packages for tables
\usepackage{cite}
\usepackage{algorithm}
\usepackage{lineno}
\usepackage{color}
\usepackage{setspace}
%\double-spacing

% bibliography style
\bibliographystyle{plos2009}

%Text layout
\topmargin 0.0cm
\oddsidemargin 0.5cm
\evensidemargin 0.5cm
\textwidth 16cm 
\textheight 21cm


% Bold the 'Figure #' in the caption and separate it with a period
% Captions will be left justified
\usepackage[labelfont=bf,labelsep=period,justification=raggedright]{caption}


\def\pkg#1{\texttt{#1}}
\def\code#1{{\texttt{#1}}}
\def\R{\texttt{R}}


<<echo=FALSE,print=FALSE>>=
require(geneNetBP)
prettyVersion <- packageDescription("geneNetBP")$Version
prettyDate <- format(Sys.Date())
@

% Remove brackets from numbering in List of References
\makeatletter
\renewcommand{\@biblabel}[1]{\quad#1.}
\makeatother

\author{Janhavi Moharil\\ University at Buffalo}
\title{Belief Propagation in Genotype-Phenotype Networks using the \pkg{geneNetBP} package}
\date{\pkg{geneNetBP} version \Sexpr{prettyVersion} as of \Sexpr{prettyDate}}

\begin{document}
\SweaveOpts{concordance=TRUE}
% \SweaveOpts{concordance=FALSE}

\maketitle

\tableofcontents

\section{Introduction}

\noindent The \code{geneNetBP} package implements methods to predict system-wide changes in beliefs after absorbing evidence in probabilistic graphical models. The package includes functions to fit Conditional Gaussian Bayesian Network (CG-BN) to specifically genotype-phenotype or Quantitative Trait Loci (QTL) data, absorb evidence in these networks and quantify and visualize the changes in network beliefs.\\

\noindent The package makes extensive use of \code{RHugin} package that provides an R interface for the Hugin Decision Engine, a commercial software for building and infering Bayesian belief networks. Note that \code{RHugin} is currently not available on CRAN and is hosted on R-Forge. \code{geneNetBP} requires Hugin and RHugin to be installed. \code{RHugin} can be downloaded from \url{http://rhugin.r-forge.r-project.org}. The Hugin Decision Engine can be downloaded from \url{http://www.hugin.com}. Detailed installation instructions of the \code{geneNetBP} package and package dependencies are available on the project homepage on R-Forge, \url{http://genenetbp.r-forge.r-project.org.}\\ 

\noindent Please note that \code{RHugin} is required for proper functioning of \code{geneNetBP}. The package \code{RHugin} will not automatically load upon loading \code{geneNetBP} package. Please use \code{library(RHugin)} or \code{require(RHugin) to load \code{RHugin} before using \code{geneNetBP}}.\\
 
\section{Datasets}

\noindent There are 3 datasets provided with this package. 

\subsection{mouse} 
\noindent The \emph{Mus Musculus} Kidney eQTL data (\code{mouse}) was obtained from a F2 inner-cross between inbred MRL/MpJ and SM/J strains of mice \cite{hageman2011uncovering}. The original data consists of 33,872 gene expression traits for 173 males. After linkage analysis and filtering based on location and significance of QTL, the data consists of 14 genes and their SNP markers corresponding to their QTL. Thus the final dataset has 2 variables \code{mousegeno}, data frame of 173 observations (genotype) of 5 variables (SNP markers)  and \code{mousepheno}, data frame of 173 observations (normalized gene expression) of 14 variables (genes).\\

\noindent Load the dataset and view the first 3 observations:

<<dataset,results=verbatim>>=
data(mouse,package="geneNetBP")
head(mousegeno,n=3)
head(mousepheno,n=3)
@

\noindent Note that there are 3 possible genotype states MM (homozygous) denoted by 1, H (heterozygous) by 2 and SS (homozygous) by 3. The genotypes are categorical variables and hence all columns in data frame \code{mousegeno} have to be of class factor while the phenotypes are continuous variables with all columns in data frame \code{mousepheno} of class numeric.\\ 


\subsection{toy} 
\noindent The \code{toy} is a simulated eQTL dataset from the network shown below, of 500 observations, 3 genotypes (Q1,Q2,Q3) each having 2 possible states (\code{toygeno}) and 6 phenotypes, X1-X6 (\code{toypheno}).  \\

\begin{figure}[H]
  \centering
  \includegraphics[trim=0 450 300 80,clip,height=7cm,width=7cm]{toy_graph}
  \caption{Toy network example.}
\end{figure}


\subsection{yeast}

\noindent The \code{yeast} dataset is a subset of the widely studied yeast expression dataset comprising of 112 F1 segregants from a cross between BY4716 and RM11-1a strains of \emph{Saccharomyces Cerevisiae} \cite{kruglak2005, kruglak2005nature}. The original dataset consists of expression values reported as log2(sample/ BY reference) for 6216 genes. The data can be accessed in Gene Expression Omnibus (GEO) by accession number (GSE1990). After linkage analysis and filtering based on location and significance of QTL, a final set of 25 genes and their corresponding 12 SNP markers were identified and included in the yeast dataset.\\ 

\noindent Thus the final dataset has 2 variables \code{yeastgeno}, data frame of 112 observations (genotype) of 9 variables (SNP markers)  and \code{yeastpheno}, data frame of 112 observations (normalized gene expression) of 16 variables (genes).\\

\noindent Load the dataset and view the first 3 observations:

<<dataset,results=verbatim,eval=FALSE>>=
data(yeast,package="geneNetBP")
head(yeastgeno,n=3)
head(yeastpheno,n=3)
@

\noindent Note that there are 2 possible genotype states denoted by 1 and 2. The genotypes are categorical variables and hence all columns in data frame \code{yeastgeno} have to be of class factor while the phenotypes are continuous variables with all columns in data frame \code{yeastpheno} of class numeric.\\ 


\section{Fit CG-BN to QTL data}
\subsection{Model}
\noindent The graphical model is represented as a Directed Acyclic Graph (DAG). The nodes in the graph represent the model variables, which may be discrete (QTL) or continuous (phenotypes). The phenotypes (e.g., metabolites, gene-expression, or clinical traits etc) are assumed to be continuous and follow a normal distribution.  The data consists of $n$ phenotypes ($X$) and $m$ genotypes at Single Nucleotide Polymorphism (SNP) markers and is defined as: $D=\{X_1, \ldots, X_n, Q_1, \ldots, Q_m\}$.  \\

\noindent Model Assumptions:\\

\noindent 1. Discrete variables precede the continuous variables.\\  
\noindent 2. No relationships between discrete variables (no edges between them).\\

\noindent Local relationships between continuous child nodes and parents are described using Homogeneous Conditional Gaussian Models (HCGM).  The conditional distribution for a phenotype $Y=X_j$ with discrete parent $Q_i$ with genotype states ($g$) and continuous parent $X_i$ ($i\neq j$) is modeled as:
  \begin{equation} 
P\left(Y \mid  Q_i={g}, X_i = x_i \right)=N\left(\alpha(g) + \beta(g)^{T}x_i, \gamma(g) \right),  \label{eq:local}
\end{equation}
where the mean is a regression that depends on both discrete and continuous parents, but the variance depends only on the discrete parents (genotype states).  The parameters of the CG-BN and subsequently the marginal distributions are inferred from the data under the constraints of the topology and the Markov condition using the PC-algorithm in \code{RHugin} package.\\  

\subsection{Mouse Example}

\noindent We will use the function \code{fit.gnbp} to learn the structure of a genotype-phenotype network from mouse dataset. This function uses the PC algorithm and the EM algorithm implemented in the \code{RHugin} package to learn the network structure and and the conditional probability tables for each node in the network. 

\subsubsection{fit.gnbp}

\noindent The simplest example of fitting a CG-BN to mouse QTL data is given below. This example uses default parameters.\\

\begin{Schunk}
\begin{Sinput}
> fit.gnbp(mousegeno,mousepheno)
\end{Sinput}
\begin{Soutput}
$gp
A Hugin domain: there are 19 nodes and 17 edges


$gp_nodes
node      class     levels type   
[1,] "Cyp4a31" "numeric" "0"    "pheno"
[2,] "Slc5a9"  "numeric" "0"    "pheno"
[3,] "Slc6a9"  "numeric" "0"    "pheno"
[4,] "Hmgcl"   "numeric" "0"    "pheno"
[5,] "Ptp4a2"  "numeric" "0"    "pheno"
[6,] "Ak2"     "numeric" "0"    "pheno"
[7,] "Zbtb8a"  "numeric" "0"    "pheno"
[8,] "Stx12"   "numeric" "0"    "pheno"
[9,] "Trspap1" "numeric" "0"    "pheno"
[10,] "Mecr"    "numeric" "0"    "pheno"
[11,] "Wdtc1"   "numeric" "0"    "pheno"
[12,] "Atpif1"  "numeric" "0"    "pheno"
[13,] "Rbbp4"   "numeric" "0"    "pheno"
[14,] "Tlr12"   "numeric" "0"    "pheno"
[15,] "Qchr4"   "factor"  "3"    "geno" 
[16,] "Qchr17"  "factor"  "3"    "geno" 
[17,] "Qchr15"  "factor"  "3"    "geno" 
[18,] "Qchr11"  "factor"  "3"    "geno" 
[19,] "Qchr2"   "factor"  "3"    "geno" 

$gp_flag
[1] "cg"

attr(,"class")
[1] "gpfit"

\end{Soutput}
\end{Schunk}

\noindent The learnt network structure is returned as RHugin domain in the first element \code{gp} of the list. An RHugin domain is an external pointer and hence cannot be saved in R workspace. The RHugin package provides functions \code{read.rhd} and \code{write.rhd} for loading and saving Hugin domains. The domains that are not saved will be lost when quitting R. The use of assignment operator such as <- or = will only return the pointer.Refer to the RHugin help manual for more information.\\ 

\noindent The inferred network structure is very sensitive to the significance level (specified as \code{alpha}) and hence it is recommended to try out different values of the argument \code{alpha}. Note that the argument \code{alpha} is for use with RHugin package i.e. the function \code{fit.gnbp} will pass on \code{alpha} to RHugin functions.For example,

\begin{Schunk}
\begin{Sinput}
> fit.gnbp(mousegeno,mousepheno,alpha = 0.1)
\end{Sinput}
\begin{Soutput}
$gp
A Hugin domain: there are 19 nodes and 31 edges


$gp_nodes
node      class     levels type   
[1,] "Cyp4a31" "numeric" "0"    "pheno"
[2,] "Slc5a9"  "numeric" "0"    "pheno"
[3,] "Slc6a9"  "numeric" "0"    "pheno"
[4,] "Hmgcl"   "numeric" "0"    "pheno"
[5,] "Ptp4a2"  "numeric" "0"    "pheno"
[6,] "Ak2"     "numeric" "0"    "pheno"
[7,] "Zbtb8a"  "numeric" "0"    "pheno"
[8,] "Stx12"   "numeric" "0"    "pheno"
[9,] "Trspap1" "numeric" "0"    "pheno"
[10,] "Mecr"    "numeric" "0"    "pheno"
[11,] "Wdtc1"   "numeric" "0"    "pheno"
[12,] "Atpif1"  "numeric" "0"    "pheno"
[13,] "Rbbp4"   "numeric" "0"    "pheno"
[14,] "Tlr12"   "numeric" "0"    "pheno"
[15,] "Qchr4"   "factor"  "3"    "geno" 
[16,] "Qchr17"  "factor"  "3"    "geno" 
[17,] "Qchr15"  "factor"  "3"    "geno" 
[18,] "Qchr11"  "factor"  "3"    "geno" 
[19,] "Qchr2"   "factor"  "3"    "geno" 

$gp_flag
[1] "cg"

attr(,"class")
[1] "gpfit"
\end{Soutput}
\end{Schunk}

\noindent The inferred network structure can be visualized by the generic plot method for RHugin domain, however it has minimal graphic capabilities. Refer to RHugin manual for more help on the plot method. We will plot the network using \code{Rgraphviz} package that has several ways of rendering customized graphs. Good news is that the RHugin package has a function to coerce the RHugin domain into a graph object of class "graphNEL".\\

\begin{center}

<<B1,fig=FALSE,eval=FALSE>>=
network<-fit.gnbp(mousegeno,mousepheno,alpha = 0.1)
##convert the RHugin domain to a graph object
BNgraph<-as.graph.RHuginDomain(network$gp)
##set node font size
attrs<-list()
attrs$node$fontsize<-30
## plot method for graph objects
plot(BNgraph,attrs=attrs) 
@
  \end{center}

\begin{figure}[H]
\centering 
\includegraphics{mouse_graph}
\caption{Conditional Gaussian network learnt from mouse QTL data}
\end{figure} 

\noindent Notice that the network now has 31 edges.Also, Qchr17 and Qchr2 are not included in the network. Any additional domain knowledge can be provided through a list of constraints.\\ 

\noindent More help about the structure of the constraints list can be found in RHugin documentation.

\section{Absorbing evidence and network comparison}
\subsection{Evidence Absorption and Belief Propagation}  

\noindent New evidence can be entered by setting phenotypes in the network to a particular value, $X_i = x_i^{*}$.  The evidence can pertain to a single node or multiple nodes in the network.\\

\noindent Through message passing, the probability distributions are updated (called as beliefs) after taking into account new evidence. Updated beliefs for discrete nodes (genotypes) are simply updated estimated frequencies under the new evidence.For continuous nodes (phenotypes), the updated beliefs are in terms of revised parameters for the Gaussian distribution. The original and absorbed network are compared node-wise by quantifying the change in marginals.\\  

\noindent A symmetric version of the Kullback-Leibler information, known as Jeffrey's information is calculated to compare the marginal belief in the original network $X_i^{\rm 0} \sim N( \mu_0, \sigma_0^2)$ to the absorbed network $X_i^{\rm abs} \sim N( \mu_{\rm abs}, \sigma_{\rm abs}^2)$.  Jeffrey's information, which is computed for all continuous unabsorbed nodes in the network,  is given as: 
  \[ J \left( X_{i}^{\rm 0}, X_{i}^{\rm abs} \right) = I^{\rm KL}\left( X_{i}^{\rm 0}, X_{i}^{\rm abs} \right)  + I^{\rm KL}\left( X_{i}^{\rm abs}, X_{i}^{\rm 0} \right)   \]
where
\[ I^{\rm KL}\left( X_{i}^{\rm 0}, X_{i}^{\rm abs} \right) =  \frac{1}{2}  \left\{ \frac{(\mu_0 - \mu_{\rm abs})^2}{\sigma_0^2} + \frac{\sigma_0^2}{\sigma_{\rm abs}^2} - \log\left( \frac{\sigma_0^2}{\sigma_{\rm abs}^2} \right) - 1 \right\}. \]
For ease of interpretation, the signed Jeffrey's information
\[\rm{sign}(\mu_0-\mu_{\rm{abs}})\cdot   J\left( X_{i}^{\rm 0}, X_{i}^{\rm abs} \right)\]
is used to demonstrate the direction of change after the absorption of evidence.\\  

\noindent The changes in belief are measured only for the nodes that are \code{d}-connected (conditionally dependent) to the entered evidence. Nodes that are \code{d}-separated from absorbed evidence are not influenced, and, consequently, do not change beliefs.\\

\subsection{Mouse Example}

Suppose we know the marginal mean of one of the nodes \code{Tlr12} is -0.99 and we wish to enter this new information in the mouse network and see the updated states of other nodes. New evidence for single or multiple nodes can be entered using the function \code{absorb.gnbp} which absorbs evidence and propagates the beliefs. 

\subsubsection{absorb.gnbp}

\noindent The function \code{absorb.gnbp} uses the \code{RHugin} package to absorb the evidence in the specified nodes and update the beliefs of all nodes and then calculates Jeffrey's signed information for all \code{d}-connected nodes. The following example illustrates how to absorb evidence after fitting a network to QTL data using geneNetBP package. \\

\noindent 1. Absorb a single evidence for a single node

\begin{Schunk}
\begin{Sinput}
> network<-fit.gnbp(mousegeno,mousepheno,alpha=0.1)
> ## Absorb evidence
> absorb.gnbp(network,node="Tlr12",evidence=matrix(-0.99))
\end{Sinput}
\begin{Soutput}
$gp
A Hugin domain: there are 19 nodes and 31 edges


$gp_flag
[1] "cg"

$gp_nodes
node      class     levels type   
[1,] "Cyp4a31" "numeric" "0"    "pheno"
[2,] "Slc5a9"  "numeric" "0"    "pheno"
[3,] "Slc6a9"  "numeric" "0"    "pheno"
[4,] "Hmgcl"   "numeric" "0"    "pheno"
[5,] "Ptp4a2"  "numeric" "0"    "pheno"
[6,] "Ak2"     "numeric" "0"    "pheno"
[7,] "Zbtb8a"  "numeric" "0"    "pheno"
[8,] "Stx12"   "numeric" "0"    "pheno"
[9,] "Trspap1" "numeric" "0"    "pheno"
[10,] "Mecr"    "numeric" "0"    "pheno"
[11,] "Wdtc1"   "numeric" "0"    "pheno"
[12,] "Atpif1"  "numeric" "0"    "pheno"
[13,] "Rbbp4"   "numeric" "0"    "pheno"
[14,] "Tlr12"   "numeric" "0"    "pheno"
[15,] "Qchr4"   "factor"  "3"    "geno" 
[16,] "Qchr17"  "factor"  "3"    "geno" 
[17,] "Qchr15"  "factor"  "3"    "geno" 
[18,] "Qchr11"  "factor"  "3"    "geno" 
[19,] "Qchr2"   "factor"  "3"    "geno" 

$evidence
[,1]
[1,] -0.99

$node
[1] "Tlr12"

$marginal
$marginal$pheno
$marginal$pheno$mean
[,1]
Rbbp4    2.317482e-17
Atpif1   2.190113e-03
Wdtc1    2.514671e-17
Mecr    -1.551256e-16
Trspap1  4.239712e-03
Stx12    4.433032e-17
Zbtb8a  -2.003327e-17
Ak2     -7.153821e-03
Ptp4a2   3.519799e-03
Hmgcl   -7.136515e-03
Slc6a9  -1.957688e-02
Slc5a9   2.471620e-02
Cyp4a31  1.914642e-02

$marginal$pheno$var
[,1]
Rbbp4   0.9557443
Atpif1  0.9027874
Wdtc1   0.9574396
Mecr    0.9550281
Trspap1 0.8530483
Stx12   0.9575380
Zbtb8a  0.9551227
Ak2     0.7696464
Ptp4a2  0.8550665
Hmgcl   0.8509102
Slc6a9  0.7939058
Slc5a9  0.8538129
Cyp4a31 0.8965621


$marginal$geno
$marginal$geno$freq
state1    state2   state3
Qchr4 0.2312139 0.4682081 0.300578



$belief
$belief$pheno
$belief$pheno$mean
[,1]
Rbbp4    0.8776457
Atpif1  -0.6538109
Wdtc1    0.6669131
Mecr    -0.8791569
Trspap1 -0.6613503
Stx12    0.8676931
Zbtb8a  -0.1222389
Ak2      0.6720433
Ptp4a2  -0.6969352
Hmgcl    0.6855139
Slc6a9   0.5667517
Slc5a9  -0.6510656
Cyp4a31 -0.5043484

$belief$pheno$var
[,1]
Rbbp4   0.4859803
Atpif1  0.6226163
Wdtc1   0.6627283
Mecr    0.4428854
Trspap1 0.5679888
Stx12   0.4933635
Zbtb8a  0.8083572
Ak2     0.5327134
Ptp4a2  0.5448964
Hmgcl   0.5628789
Slc6a9  0.5718937
Slc5a9  0.5254673
Cyp4a31 0.6995273


$belief$geno
$belief$geno$state1
[,1]
Qchr4 0.007944801

$belief$geno$state2
[,1]
Qchr4 0.2152284

$belief$geno$state3
[,1]
Qchr4 0.7768268



$JSI
[,1]
Rbbp4    0.71650239
Atpif1  -0.32687548
Wdtc1    0.31813768
Mecr    -0.79365404
Trspap1 -0.36674950
Stx12    0.69209864
Zbtb8a  -0.01550701
Ak2      0.40056441
Ptp4a2  -0.42017671
Hmgcl    0.39734466
Slc6a9   0.28567820
Slc5a9  -0.41106696
Cyp4a31 -0.18983139

$FC
NULL

attr(,"class")
[1] "gnbp"
\end{Soutput}
\end{Schunk}

\noindent Note that the function absorb.gnbp requires the argument \code{evidence} to be of class matrix. If only a single value of evidence is to be entered, this can be done by simply using the function matrix(), as above.\\

\noindent \code{absorb.gnbp} returns an object of class "gnbp" which is a list of several variables. \\

\noindent The Jeffrey's signed information is returned as a matrix \code{JSI} that gives the quantified comparison of beliefs of the continuous nodes (phenotypes) before and after evidence absorption. Note that since we absorbed only a single value of evidence, \code {JSI} is a column vector.In addition to Jeffrey's signed information, the marginal distributions (mean and variance for continuous nodes in and genotype frequencies for SNP markers) before evidence absorption and the updated beliefs (after evidence absorption) are also returned.\\ 

\noindent Since Qchr15 is \code{d}-separated when evidence is absorbed in \code{Tlr12}, it's marginal distribution is not affected and hence the beliefs are not calculated. Qchr4, on the other hand is \code{d}-connected and a list returns the updated frequencies of all 3 genotype states of the SNP marker Qchr15.\\ 

\noindent 2. Absorb a sequence of evidence for a single node

\begin{Schunk}
\begin{Sinput}
> network<-fit.gnbp(mousegeno,mousepheno,alpha=0.1)
> ##Absorb evidence
> absorb.gnbp(network,node="Tlr12",evidence=t(matrix(c(2.5,3,3.5,4))))
\end{Sinput}
\end{Schunk}

\subsubsection{gen.evidence} 

\noindent A function \code{gen.evidence} is useful to generate evidence for a node based on it's marginal distribution. This is particularly useful when network perturbation to assess the network behaviour is of interest.\\

\noindent To generate a spectrum of evidence for \code{Tlr12} within $\pm$$2$ standard deviations of it's marginal distribution, we input the inferred network to \code{gen.evidence}\\

\begin{Schunk}
\begin{Sinput}
> network<-fit.gnbp(mousegeno,mousepheno,alpha = 0.1)
> ##Generate evidence
> evidence<-gen.evidence(network,node="Tlr12",std=2,length.out=20)
> ##absorb evidence
> absorb.gnbp(network,node="Tlr12",evidence=evidence)
\end{Sinput}
\end{Schunk}

Note that \code{JSI} will now be a matrix whose number of rows are the \emph{d}-connected phenotype nodes to \code{Tlr12} and the number of columns is the length of evidence absorbed in \code{Tlr12}.\\

When a sequence of evidence is absorbed for a single node in the network, \code{absorb.gnbp} also plots the JSI of the \emph{d}-connected nodes vs the evidence absorbed.\\ 

\begin{figure}[H]
\centering 
\includegraphics{mouse_tlr12_evidence}
\caption{Plot produced by \code{absorb.gnbp}}
\end{figure} 


\section{Visualizing network changes}

\noindent A generic plot method for plotting the genotype-phenotype network in which evidence has been absorbed and propagated is available. It is important to note that the input to this plot method is an object of class "gnbp". If a RHugin domain is input to plot, the corresponding plot method for RHugin domain will be used.  The plot method will convert the RHugin domain into an object of class "graphNEL" by using Rgraphviz package as mentioned previously. The argument nodeAttrs to plot method for graph objects in Rgraphviz package is then used to customize the plot. \\

\subsection{A complete example}

\noindent A complete example that fits a network, absorbs evidence and plots the network:\\

\begin{Schunk}
\begin{Sinput}
> network<-fit.gnbp(mousegeno,mousepheno,alpha=0.1)
> network<-absorb.gnbp(network,node="Tlr12",evidence=matrix(-0.99))
> plot(x=network)
\end{Sinput}
\end{Schunk}

\begin{figure}[H]
\centering 
\includegraphics{mouse_network_tlr12}
\caption{Evidence absorption in single node}
\end{figure} 

\noindent The plot method will draw the network with Jeffrey's signed information mapped onto it by a colormap. There is an option to plot beliefs (updated marginal means) which can be entered through the argument y (see help for \code{plot.gnbp}).\\

\noindent The \code{d}-separated nodes are white while the colored nodes are \code{d}-connected, with the color indicating the strength and direction of change . By default, the continuous nodes are of shape "ellipse" and a "box" shape is used for discrete nodes. The node for which evidence is absorbed is colored green (default color).\\

\subsection{Plot options}

\noindent Colormap options such as end colors for the positive and negative gradients and the resolution of the colormap can be customized. The resolution of the colormap can be specified by \code{col.length}. The argument \code{col.palette} can be used to specify the end colors.\\ 

\begin{Schunk}
\begin{Sinput}
> col.palette<-list(pos_high="darkgreen", pos_low= "palegreen2", 
                   neg_high="wheat1", neg_low = "red",
                   dsep_col="white",qtl_col="grey",node_abs_col="yellow") 
> plot(x=network,col.palette=col.palette)
\end{Sinput}
\end{Schunk}

\begin{figure}[H]
\centering 
\includegraphics{mouse_network_tlr12_colpalette}
\caption{Mouse network with custom color palette}
\end{figure} 

\noindent The plot method will always map the JSI or beliefs onto the network for a single piece of evidence. Incase a spectrum of evidence is absorbed for a single/multiple node(s), then the evidence for which we wish to visualize the network changes can be chosen by specifying the corresponding column number of JSI or belief matrix through the argument \code{ncol}.\\

\noindent For example we absorbed a sequence of evidence for \code{Tlr12} and we wish to visualize the belief changes for evidence = 1.767, we can do this as follows.\\

\begin{Schunk}
\begin{Sinput}
> network<-fit.gnbp(mousegeno,mousepheno,alpha = 0.1)
> ##Generate evidence
> evidence<-gen.evidence(network,node="Tlr12",std=2,length.out=20)
> network<-absorb.gnbp(network,node="Tlr12",evidence=evidence)
> plot(x=network,y="belief",ncol=20)
\end{Sinput}
\end{Schunk}

\section{Belief propagation in known networks}

\noindent Belief propagation can be implemented in known genotype-phenotype networks. If the network structure is known apriori from a knowledge database, then learning step can be skipped in \code{fit.gnbp} by seting \code{learn = FALSE}. The conditional probabilities will still need to be learnt. This section demonstrates how to specify known networks and subsequent belief propagation in a simulated toy example.\\

\noindent First create a list of known edges from parent to child.\\ 

<<L,results=hide,eval=FALSE>>=
  ## Load the toy dataset
  data(toy)
## Create a list of edges ("from (parent)", "to (child)")
edgelist=list()
edgelist[[1]]<-cbind("Q1","X1")
edgelist[[2]]<-cbind("Q2","X1")
edgelist[[3]]<-cbind("Q2","X2")
edgelist[[4]]<-cbind("Q2","X4")
edgelist[[5]]<-cbind("X1","X2")
edgelist[[6]]<-cbind("Q3","X2")
edgelist[[7]]<-cbind("Q3","X3")
edgelist[[8]]<-cbind("X2","X5")
edgelist[[9]]<-cbind("X2","X6")
edgelist[[10]]<-cbind("X4","X6")
@
  
  \noindent In \code{fit.gnbp} provide the edgelist and set \code{learn = FALSE}. This will skip the learning and only conditional probabilities will be calculated for each node in the network based on the given network structure and data. Absorbing evidence and propagating the beliefs subsequently is then straightforward.\\


\begin{Schunk}
\begin{Sinput}
> network<-fit.gnbp(toygeno,toypheno,learn=FALSE,edgelist=edgelist)
> ##Generate evidence
> evidence<-gen.evidence(network,node="X2",std=2,length.out=20)
> network<-absorb.gnbp(network,node="X2",evidence=evidence)
> plot(x=network,y="JSI",ncol=17,fontsize = 5)
\end{Sinput}
\end{Schunk}

\begin{figure}[H]
\centering 
\includegraphics{toy_network_belief}
\caption{Belief propagation in known network}
\end{figure}

\bibliography{newbib02}

\end{document}

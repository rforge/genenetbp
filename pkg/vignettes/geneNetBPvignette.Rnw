% \VignetteIndexEntry{An R Package for belief propagation in genotype-phenotype networks}
\documentclass[12pt, a4paper]{article}

\title{Belief Propagation in Genotype-Phenotype Networks using the geneNetBP package}
\author{Janhavi Moharil\\ Department of Biostatistics\\ University at Buffalo}

\begin{document}
\SweaveOpts{concordance=FALSE}

\maketitle

\noindent The geneNetBP package implements methods to predict system-wide changes in beliefs after absorbing evidence in probabilistic graphical models. The package includes functions to fit Conditional Gaussian Bayesian Network (CG-BN) to specifically genotype-phenotype or Quantitative Trait Loci (QTL) data, absorb evidence in these networks and quantify and visualize the changes in network beliefs. The package makes extensive use of RHugin package that provides an R interface for the Hugin Decision Engine.\\ 

\section*{Fit CG-BN to QTL data}
\textbf{\emph{Network modeling:}} The graphical model is represented as a Directed Acyclic Graph (DAG). The nodes in the graph represent the model variables, which may be discrete (QTL) or continuous (phenotypes). The phenotypes (e.g., metabolites, gene-expression, or clinical traits etc) are assumed to be continuous and follow a normal distribution.  The data consists of $n$ phenotypes ($X$) and $m$ genotypes at Single Nucleotide Polymorphism (SNP) markers and is defined as: $D=\{X_1, \ldots, X_n, Q_1, \ldots, Q_m\}$.  \\

\noindent Model Assumptions:\\

1. Discrete variables precede the continuous variables.  
2. No relationships between discrete variables (no edges between them).\\

\noindent Local relationships between continuous child nodes and parents are described using Homogeneous Conditional Gaussian Models (HCGM).  The conditional distribution for a phenotype $Y=X_j$ with discrete parent $Q_i$ with genotype states ($g$) and continuous parent $X_i$ ($i\neq j$) is modeled as:
\begin{equation} 
P\left(Y \mid  Q_i={g}, X_i = x_i \right)=N\left(\alpha(g) + \beta(g)^{T}x_i, \gamma(g) \right),  \label{eq:local}
\end{equation}
where the mean is a regression that depends on both discrete and continuous parents, but the variance depends only on the discrete parents (genotype states).  The parameters of the CG-BN and subsequently the marginal distributions are inferred from the data under the constraints of the topology and the Markov condition using the PC-algorithm in \emph{RHugin} package.\\  

\textbf{\emph{Mouse dataset:}} The \emph{Mus} \emph{Musculus} Kidney eQTL data was obtained from a F2 inner-cross between inbred MRL/MpJ and SM/J strains of mice. The original data consists of 33,872 gene expression traits for 173 males. After linkage analysis and filtering based on location and significance of QTL, the data consists of 14 genes and their SNP markers corresponding to their QTL. Thus the final dataset has 2 variables \emph{geno}, data frame of 173 observations (genotype) of 5 variables (SNP markers)  and \emph{pheno}, data frame of 173 observations (normalized gene expression) of 14 variables (genes).\\

\noindent Load the dataset and view the first 3 observations:

<<dataset,results=verbatim>>=
data(mouse,package="geneNetBP")
head(geno,n=3)
head(pheno,n=3)
@

\noindent Note that there are 3 possible genotype states MM (homozygous) denoted by 1, H (heterozygous) by 2 and SS (homozygous) by 3. The genotypes are categorical variables and hence all columns in data frame \emph{geno} have to be of class factor while the phenotypes are continuous variables with all columns in data frame \emph{pheno} of class numeric.\\ 

\noindent The simplest example of fitting a CG-BN to mouse QTL data is given below. This example uses default parameters.\\

\dontrun{
<<A,results=verbatim>>=
if(require("RHugin",quietly=TRUE))
{
library(geneNetBP)
fit.gnbp(geno,pheno)
}
@
}

\noindent The learnt network structure is returned as RHugin domain in the first element \emph{gp} of the list. An RHugin domain is an external pointer and hence cannot be saved in R workspace. The RHugin package provides functions \emph{read.rhd} and \emph{write.rhd} for loading and saving Hugin domains. The domains that are not saved will be lost when quitting R. The use of assignment operator such as <- or = will only return the pointer.Refer to the RHugin help manual for more information.\\ 

\noindent The inferred network structure is very sensitive to the significance level (specified as \emph{alpha}) and hence it is recommended to try out different values of the argument \emph{alpha}. Note that the argument \emph{alpha} is for use with RHugin package i.e. the function fit.geneNetBP will pass on \emph{alpha} to RHugin functions.For example,

\dontrun{
<<B,results=verbatim>>=
if(require("RHugin",quietly=TRUE))
{
fit.gnbp(geno,pheno,alpha = 0.1)
}
@
}

\noindent The inferred network structure can be visualized by the generic plot method for RHugin domain, however it has minimal graphic capabilities. Refer to RHugin manual for more help on the plot method. We will plot the network using Rgraphviz package that has several ways of rendering customized graphs. Good news is that the RHugin package has a function to coerce the RHugin domain into a graph object of class "graphNEL".

\begin{center}

\dontrun{
<<B1,fig=TRUE>>=
if(require("RHugin",quietly=TRUE))
{
network<-fit.gnbp(geno,pheno,alpha = 0.1)
##convert the RHugin domain to a graph object
BNgraph<-as.graph.RHuginDomain(network$gp)
##set node font size
attrs<-list()
attrs$node$fontsize<-30
## plot method for graph objects
plot(BNgraph,attrs=attrs) 
}
@
}

\end{center}

\noindent Notice that the network now has 31 edges.Also, Qchr17 and Qchr2 are not included in the network. Any additional domain knowledge can be provided through a list of constraints. 

\noindent More help about the structure of the constraints list can be found in RHugin documentation.

\section*{Absorbing evidence and network comparison}
{\textbf{Absorption of Evidence:}}  New evidence can be entered by setting phenotypes in the network to a particular value, $X_i = x_i^{*}$.  The evidence can pertain to a single node or multiple nodes in the network.\\

\noindent A function \emph{gen.evidence} is useful to generate evidence for a node based on it's marginal distribution. This is particularly useful when network perturbation to assess the network behaviour is of interest.

\noindent To generate a spectrum of evidence for \emph{Tlr12} within $\pm$$2$ standard deviations of it's marginal distribution, we input the inferred network to \emph{gen.evidence}\\


\dontrun{
<<C,results=verbatim,print=TRUE>>=
if(require("RHugin",quietly=TRUE))
{
##Fit network
network<-fit.gnbp(geno,pheno,alpha = 0.1)
##Generate evidence
evidence<-gen.evidence(network,node="Tlr12",std=2,length.out=20)
}
@
}

{\textbf{Comparison of Networks:}}  Through message passing, the probability distributions are updated (called as beliefs) after taking into account new evidence. Updated beliefs for discrete nodes (genotypes) are simply updated estimated frequencies under the new evidence.For continuous nodes (phenotypes), the updated beliefs are in terms of revised parameters for the Gaussian distribution. The original and absorbed network are compared node-wise by quantifying the change in marginals.\\  

\noindent A symmetric version of the Kullback-Leibler information, known as Jeffrey's information is calculated to compare the marginal belief in the original network $X_i^{\rm 0} \sim N( \mu_0, \sigma_0^2)$ to the absorbed network $X_i^{\rm abs} \sim N( \mu_{\rm abs}, \sigma_{\rm abs}^2)$.  Jeffrey's information, which is computed for all continuous unabsorbed nodes in the network,  is given as: 
\[ J \left( X_{i}^{\rm 0}, X_{i}^{\rm abs} \right) = I^{\rm KL}\left( X_{i}^{\rm 0}, X_{i}^{\rm abs} \right)  + I^{\rm KL}\left( X_{i}^{\rm abs}, X_{i}^{\rm 0} \right)   \]
where
\[ I^{\rm KL}\left( X_{i}^{\rm 0}, X_{i}^{\rm abs} \right) =  \frac{1}{2}  \left\{ \frac{(\mu_0 - \mu_{\rm abs})^2}{\sigma_0^2} + \frac{\sigma_0^2}{\sigma_{\rm abs}^2} - \log\left( \frac{\sigma_0^2}{\sigma_{\rm abs}^2} \right) - 1 \right\}. \]
For ease of interpretation, the signed Jeffrey's information
\[\rm{sign}(\mu_0-\mu_{\rm{abs}})\cdot   J\left( X_{i}^{\rm 0}, X_{i}^{\rm abs} \right)\]
is used to demonstrate the direction of change after the absorption of evidence.\\  

\noindent The changes in belief are measured only for the nodes that are \emph{d}-connected (conditionally dependent) to the entered evidence. Nodes that are \emph{d}-separated from absorbed evidence are not influenced, and, consequently, do not change beliefs.\\

\noindent The function \emph{absorb.gnbp} uses the \emph{RHugin} package to absorb the evidence in the specified nodes and update the beliefs of all nodes and then calculates Jeffrey's signed information for all \emph{d}-connected nodes. The following example illustrates how to absorb evidence after fitting a network to QTL data using geneNetBP package. \\

\noindent 1. Absorb a single evidence for a single node\\

\dontrun{
<<F,results=verbatim>>=
if(require("RHugin",quietly=TRUE))
{
## Fit network
network<-fit.gnbp(geno,pheno,alpha=0.1)
## Absorb evidence
absorb.gnbp(network,node="Tlr12",evidence=matrix(-0.99))
}
@
}

\noindent Note that the function absorb.gnbp requires the argument \emph{evidence} to be of class matrix or a numeric vector. If only a single value of evidence is to be entered, this can be done by simply using the function matrix(), as above.\\

\noindent \courier{absorb.gnbp} returns an object of class "gnbp" which is a list of several variables. The generic plot method for geneNetBP objects will extract various useful features of the value returned by \courier{absorb.gnbp} and we expect that in the future, more functions from the package will also require these components. \\

\noindent The Jeffrey's signed information is returned as a matrix \courier{JSI} that gives the quantified comparison of beliefs of the continuous nodes (phenotypes) before and after evidence absorption. Note that since we absorbed only a single value of evidence, \courier {JSI} is a column vector.In addition to Jeffrey's signed information, the marginal distributions (mean and variance for continuous nodes in and genotype frequencies for SNP markers) before evidence absorption and the updated beliefs (after evidence absorption) are also returned.\\ 

\noindent Since Qchr15 is \emph{d}-separated when evidence is absorbed in \emph{Tlr12}, it's marginal distribution is not affected and hence the beliefs are not calculated. Qchr4, on the other hand is \emph{d}-connected and a list returns the updated frequencies of all 3 genotype states of the SNP marker Qchr15.\\ 

\noindent 2. Absorb a sequence of evidence for a single node

\dontrun{
<<G,results=hide>>=
if(require("RHugin",quietly=TRUE))
{
## Fit network
network<-fit.gnbp(geno,pheno,alpha=0.1)
##Absorb evidence
absorb.gnbp(network,node="Tlr12",evidence=matrix(2.5,3,3.5,4))
}
@
}


\section*{Visualizing network changes}

\noindent A generic plot method for plotting the genotype-phenotype network in which evidence has been absorbed and propagated is available. It is important to note that the input to this plot method is an object of class "geneNetBP". If a RHugin domain is input to plot, the corresponding plot method for RHugin domain will be used.  The plot method will convert the RHugin domain into an object of class "graphNEL" by using Rgraphviz package as mentioned previously. The argument nodeAttrs to plot method for graph objects in Rgraphviz package is then used to customize the plot. \\

\noindent A complete example that fits a network, absorbs evidence and plots the network:\\

\begin{center}
\dontrun{
<<I,results = hide, fig=TRUE>>=
if(require("RHugin",quietly=TRUE))
{
## Fit, absorb and plot a genotype-phenotype network
network<-fit.gnbp(geno,pheno,alpha=0.1)
network<-absorb.gnbp(network,node="Tlr12",evidence=matrix(-0.99))
plot(x=network)
}
@
}
\end{center}

\noindent The plot method will draw the network with Jeffrey's signed information mapped onto it by a colormap. There is an option to plot beliefs (updated marginal means) which can be entered through the argument y (see help for \courier{plot.geneNetBP}).

\noindent The \emph{d}-separated nodes are white while the colored nodes are \emph{d}-connected, with the color indicating the strength and direction of change . By default, the continuous nodes are of shape "ellipse" and a "box" shape is used for discrete nodes. The node for which evidence is absorbed is colored green (default color).\\

\noindent Colormap options such as end colors for the positive and negative gradients and the resolution of the colormap can be customized. The resolution of the colormap can be specified by \courier{col.length}. The argument \courier{col.palette} can be used to specify the end colors.\\ 

\begin{center}
\dontrun{
<<J,results=hide, fig=TRUE>>=
if(require("RHugin",quietly=TRUE))
{
col.palette<-list(pos_high="darkgreen", pos_low= "palegreen2", 
                    neg_high="wheat1", neg_low = "red",
                    dsep_col="white",qtl_col="grey",node_abs_col="yellow") 
plot(x=network,col.palette=col.palette)
}
@
}
\end{center}

\noindent The plot method will always map the JSI or beliefs onto the network for a single piece of evidence. Incase a spectrum of evidence is absorbed for a single/multiple node(s), then the evidence for which we wish to visualize the network changes can be chosen by specifying the corresponding column number of JSI or belief matrix through the argument \courier{ncol}.\\

\noindent For example we absorbed a sequence of evidence for \emph{Tlr12} and we wish to visualize the belief changes for evidence = 1.767, we can do this as follows.

\begin{center}

\dontrun{
<<K,results=hide, fig=TRUE>>=
if(require("RHugin",quietly=TRUE))
{
##Fit network
network<-fit.gnbp(geno,pheno,alpha = 0.1)
##Generate evidence
evidence<-gen.evidence(network,node="Tlr12",std=2,length.out=20)
network<-absorb.gnbp(network,node="Tlr12",evidence=evidence)
plot(x=network,y="belief",ncol=20)
}
@
}
\end{center}

\section*{Belief propagation in known networks}

\noindent Belief propagation can obviously be also implemented in known genotype-phenotype networks. If the network structure is known from a knowledge database, then learning step can be skipped in fit.gnbp and only the conditional probabilities will be learnt based on the input network. This section demonstrates how to specify known networks and subsequent belief propagation in a simulated toy example.

\textbf{\emph{Toy dataset:}} The toy is a simulated eQTL dataset with 500 observations, 3 genotypes (Q1,Q2,Q3) each having 2 possible states and 6 phenotypes (X1-X6.)  \\

\noindent First create a list of known edges from parent to child. 

\dontrun{
<<L,results=hide>>=
## Load the toy dataset
library(geneNetBP)
data(toy)
## Create a list of edges ("from (parent)", "to (child)")
edgelist=list()
edgelist[[1]]<-cbind("Q1","X1")
edgelist[[2]]<-cbind("Q2","X1")
edgelist[[3]]<-cbind("Q2","X2")
edgelist[[4]]<-cbind("Q2","X4")
edgelist[[5]]<-cbind("X1","X2")
edgelist[[6]]<-cbind("Q3","X2")
edgelist[[7]]<-cbind("Q3","X3")
edgelist[[8]]<-cbind("X2","X5")
edgelist[[9]]<-cbind("X2","X6")
edgelist[[10]]<-cbind("X4","X6")
@
}

\noindent in \emph{fit.gnbp} provide the edgelist and set learn = FALSE. This will skip the learning and only conditional probabilities will be calculated for each node in the network based on the given network structure and data. Absorbing evidence and propagating the beliefs subsequently is then straightforward.

\begin{center}
\dontrun{
<<M,results=verbatim,fig=TRUE>>=
if(require("RHugin",quietly=TRUE))
{
##Fit network
network<-fit.gnbp(toygeno,toypheno,learn=FALSE,edgelist=edgelist)
##Generate evidence
evidence<-gen.evidence(network,node="X2",std=2,length.out=20)
network<-absorb.gnbp(network,node="X2",evidence=evidence)
plot(x=network,y="JSI",ncol=17)
}
@
}
\end{center}


\end{document}

for (i in 1:length(X))
for (j in (i+1):length(X))
{
print(i,j)
blackL=rbind(blackL,cbind(class_nodes[X[i],1],class_nodes[X[j],1]))
}
blackL<-blackL[-1,]
rownames(blackL)={}
bIM<-matrix(0,nrow=length(which(class_nodes[,"class"]=="factor")),ncol=length(which(class_nodes[,"class"]=="factor")))
rownames(bIM)<-colnames(bIM)<-class_nodes[which(class_nodes[,"class"]=="factor"),1]
block<-rep(2,nrow(bIM))
bIM[block==2,block==2]<-1
blackL<-get.edgelist(as(bIM,"igraph"),names=TRUE)
blackL<-blackL[-which(blackL[,1]==blackL[,2]),]
undirected.forbidden <- vector("list", nrow(blackL))
for (i in 1:nrow(blackL))
{
undirected.forbidden[[i]] <- blackL[i,]
}
blackL
factorial(5)
choose(5,2)
X=which(class_nodes[,"class"]=="factor")
blackL<-matrix(0,nrow=choose(length(X),2) ,ncol=2)
k=1
for (i in 1:length(X))
for (j in (i+1):length(X))
{
blackL[k,]=rbind(blackL,cbind(class_nodes[X[i],1],class_nodes[X[j],1]))
k=k+1
}
X=which(class_nodes[,"class"]=="factor")
blackL<-matrix(0,nrow=choose(length(X),2) ,ncol=2)
k=1
for (i in 1:length(X))
for (j in (i+1):length(X))
{
blackL[k,]=cbind(class_nodes[X[i],1],class_nodes[X[j],1])
k=k+1
}
seq(1,length(X),by=1)
seq(2,length(X),by=1)
seq(3,length(X),by=1)
seq(4,length(X),by=1)
seq(5,length(X),by=1)
X=which(class_nodes[,"class"]=="factor")
blackL<-matrix(0,nrow=choose(length(X),2) ,ncol=2)
k=1
for (i in 1:(length(X)-1))
for (j in (i+1):length(X))
{
blackL[k,]=cbind(class_nodes[X[i],1],class_nodes[X[j],1])
k=k+1
}
blackL
undirected.forbidden <- vector("list", nrow(blackL))
for (i in 1:nrow(blackL))
{
undirected.forbidden[[i]] <- blackL[i,]
}
undirected <- list(required = NULL,forbidden = undirected.forbidden)
# put into constraints list
qtl_constraints <- list(directed = NULL, undirected = undirected)
all_constraints=qtl_constraints
learn.structure(network,alpha=alpha,constraints=all_constraints)
all_constraints
all_constraints<-qtl_constraints
learn.structure(network,alpha=alpha,constraints=all_constraints)
network
alpha
qtl_constraints
constraints
learn.structure(network,alpha=alpha,constraints=constraints)
rm(list=ls())
load("~/eQTL/Sensitivity/Hugin/gpbn/gpbn/data/mouse.rda")
## Class Check ##
for(i in 1:dim(geno)[2])
if (class(geno[,i])!="factor")
{warning("column vectors of 'geno' are not of class factor. converting to factor...")
class(geno[,i])<-"factor"
}
Data=cbind(pheno,geno)
#####################################
## Create RHugin domain
## Specify nodes and constraints
#####################################
## Create a RHugin domain
network<-hugin.domain()
Nnodes<-length(colnames(Data))
## Determine type of nodes (discrete or continuous)
class_nodes=matrix(nrow=dim(Data)[2],ncol=3)
for (i in 1:dim(Data)[2])
{
class_nodes[i,]=c(colnames(Data)[i],class(Data[,i]),length(levels(Data[,i])))
}
colnames(class_nodes)=c("node","class","levels")
Xnum=which(class_nodes[,"class"]=="numeric")
Xfac=which(class_nodes[,"class"]=="factor")
## Add nodes
for (node in 1:length(Xnum))
add.node(network,colnames(Data)[Xnum[node]],kind="continuous")
for (node in 1:length(Xfac))
add.node(network,colnames(Data)[Xfac[node]],kind="discrete",states=levels(Data[,Xfac[node]]))
## Set cases
set.cases(network,Data)
X=which(class_nodes[,"class"]=="factor")
blackL<-matrix(0,nrow=choose(length(X),2) ,ncol=2)
k=1
for (i in 1:(length(X)-1))
for (j in (i+1):length(X))
{
blackL[k,]=cbind(class_nodes[X[i],1],class_nodes[X[j],1])
k=k+1
}
undirected.forbidden <- vector("list", nrow(blackL))
for (i in 1:nrow(blackL))
{
undirected.forbidden[[i]] <- blackL[i,]
}
undirected <- list(required = NULL,forbidden = undirected.forbidden)
# put into constraints list
qtl_constraints <- list(directed = NULL, undirected = undirected)
all_constraints<-qtl_constraints
learn.structure(network,alpha=alpha,constraints=all_constraints)
alpha=0.1
learn.structure(network,alpha=alpha,constraints=all_constraints)
all_constraints
rm(list=ls())
library(gpbn)
data(mouse)
## Simple example : Fit a bayesian network to genotype-phenotype data using the default values
fit.bn(geno,pheno)
## Fit a bayesian network to genotype-phenotype data at a specified significance level
fit.bn(geno,pheno,alpha = 0.1)
##Add a constraint
#create a list of constraints
directed.required <- list(c("Tlr12", "Hmgcl"))
directed.forbidden <- list(c("Ak2", "Hmgcl"),c("Stx12","Ak2"))
directed <- list(required = directed.required, forbidden = directed.forbidden)
constraints<-list(directed = directed, undirected = NULL)
#Fit the network
fit.bn(geno,pheno,constraints=constraints,alpha = 0.1)
data(mouse)
## Simple example : Fit a bayesian network to genotype-phenotype data
network<-fit.bn(geno,pheno,alpha=0.1)
##Absorb sequence of evidence for multiple nodes generated using \link{gen.evidence}
evidence<-gen.evidence(network,node=c("Ak2","Ptp4a2","Hmgcl"),std=2,std.equal=TRUE)
absorb.bn(network,evidence=evidence)
evidence<-gen.evidence(network,node=c("Ak2","Ptp4a2","Hmgcl"),std=2,std.equal=TRUE)
absorb.bn(network,evidence=evidence)
##Fit a network
data(mouse)
network<-fit.bn(geno,pheno,alpha=0.1)
##Generate a sequence of evidence for a single node
evidence<-gen.evidence(network,node="Tlr12",std=2,length.out=20)
##Generate a sequence of evidence for multiple nodes within equal number of standard deviations
evidence<-gen.evidence(network,node=c("Tlr12","Ak2","Ptp4a2"),std=2,length.out=20,std.equal=T)
##Generate a sequence of evidence for multiple nodes within varying number of standard deviations
evidence<-gen.evidence(network,node=c("Tlr12","Ak2","Ptp4a2"),std=c(1.5,3,2.5),length.out=20,std.equal=F)
evidence
## Fit and plot a genotype-phenotype network
data(mouse)
network<-fit.bn(geno,pheno,alpha=0.1)
plot(x=mouse,y="JSI",ncol=20)
evidence=matrix(-0.99)
evidence
library(gpbn)
## Fit, absorb and plot a genotype-phenotype network
data(mouse)
network<-fit.bn(geno,pheno,alpha=0.1)
mouse<-absorb.bn(network,node="Tlr12",evidence=matrix(-0.99))
plot(x=mouse,y="JSI",ncol=20)
library(gpbn)
data(mouse)
network<-fit.bn(geno,pheno,alpha=0.1)
mouse<-absorb.bn(network,node="Tlr12",evidence=matrix(-0.99))
plot(x=mouse,y="JSI",ncol=1)
x=mouse
y="JSI"
## get node attributes
Data<-get.cases(x$network)
class_nodes=matrix(nrow=(dim(Data)[2])-1,ncol=3)
for (i in 1:(dim(Data)[2])-1)
{
class_nodes[i,]=c(colnames(Data)[i],class(Data[,i]),length(levels(Data[,i])))
}
colnames(class_nodes)=c("node","class","levels")
## get d-connected nodes
dnodes<-get.dconnected.nodes(x$network,x$node)
dnodes<-class_nodes[match(setdiff(class_nodes[match(dnodes,class_nodes),1],x$node),class_nodes),]
## convert to graphNEL object for use with Rgraphviz
BNgraph<-as.graph.RHuginDomain(x$network)
## set node attributes
z<-nodes(BNgraph)
names(z)<-nodes(BNgraph)
nAttrs <- list()
eAttrs <- list()
attrs<-list()
nAttrs$label<-z
attrs$node$fontsize<-16
attrs$node$fontcolor<-"black"
attrs$node$fixedsize<-F
attrs$node$height<-1.5
nAttrs$shape<-rep("ellipse",length(z))
nAttrs$shape[which(class_nodes[,"class"]=="factor")]<-"box"
names(nAttrs$shape)<-nodes(BNgraph)
col.palette<-list(pos_high="red", pos_low= "wheat1",
neg_high="cyan", neg_low = "blue",
dsep_col="white",qtl_col="grey",node_abs_col="palegreen2")
score=x$JSI[,ncol]
x$JSI
ncol
ncol=1
ncol
data(mouse)
network<-fit.bn(geno,pheno,alpha=0.1)
mouse<-absorb.bn(network,node="Tlr12",evidence=matrix(-0.99))
plot(x=mouse,y="JSI",ncol=1)
score=x$JSI[,ncol]
X=length(dnodes[which(dnodes[,2]=="factor"),1])
nAttrs$fillcolor<-rep(col.palette$dsep_color,length(z))
names(nAttrs$fillcolor)<-nodes(BNgraph)
nodes(BNgraph)
nAttrs$fillcolor
nAttrs$fillcolor<-rep(col.palette$dsep_color,length(z))
nAttrs$fillcolor
z
length(z)
col.palette$dsep_color
data(mouse)
network<-fit.bn(geno,pheno,alpha=0.1)
mouse<-absorb.bn(network,node="Tlr12",evidence=matrix(-0.99))
plot(x=mouse,y="JSI",ncol=1)
## Fit, absorb and plot a genotype-phenotype network
data(mouse)
network<-fit.bn(geno,pheno,alpha=0.1)
mouse<-absorb.bn(network,node="Tlr12",evidence=matrix(-0.99))
plot(x=mouse,y="JSI",ncol=1)
library(gpbn)
## Fit, absorb and plot a genotype-phenotype network
data(mouse)
network<-fit.bn(geno,pheno,alpha=0.1)
mouse<-absorb.bn(network,node="Tlr12",evidence=matrix(-0.99))
plot(x=mouse,y="JSI",ncol=1)
## get node attributes
Data<-get.cases(x$network)
class_nodes=matrix(nrow=(dim(Data)[2])-1,ncol=3)
for (i in 1:(dim(Data)[2])-1)
{
class_nodes[i,]=c(colnames(Data)[i],class(Data[,i]),length(levels(Data[,i])))
}
colnames(class_nodes)=c("node","class","levels")
## get d-connected nodes
dnodes<-get.dconnected.nodes(x$network,x$node)
dnodes<-class_nodes[match(setdiff(class_nodes[match(dnodes,class_nodes),1],x$node),class_nodes),]
## convert to graphNEL object for use with Rgraphviz
BNgraph<-as.graph.RHuginDomain(x$network)
## set node attributes
z<-nodes(BNgraph)
names(z)<-nodes(BNgraph)
nAttrs <- list()
eAttrs <- list()
attrs<-list()
nAttrs$label<-z
attrs$node$fontsize<-16
attrs$node$fontcolor<-"black"
attrs$node$fixedsize<-F
attrs$node$height<-1.5
nAttrs$shape<-rep("ellipse",length(z))
nAttrs$shape[which(class_nodes[,"class"]=="factor")]<-"box"
names(nAttrs$shape)<-nodes(BNgraph)
x<-mouse
y="JSI"
## get node attributes
Data<-get.cases(x$network)
class_nodes=matrix(nrow=(dim(Data)[2])-1,ncol=3)
for (i in 1:(dim(Data)[2])-1)
{
class_nodes[i,]=c(colnames(Data)[i],class(Data[,i]),length(levels(Data[,i])))
}
colnames(class_nodes)=c("node","class","levels")
## get d-connected nodes
dnodes<-get.dconnected.nodes(x$network,x$node)
dnodes<-class_nodes[match(setdiff(class_nodes[match(dnodes,class_nodes),1],x$node),class_nodes),]
## convert to graphNEL object for use with Rgraphviz
BNgraph<-as.graph.RHuginDomain(x$network)
## set node attributes
z<-nodes(BNgraph)
names(z)<-nodes(BNgraph)
nAttrs <- list()
eAttrs <- list()
attrs<-list()
nAttrs$label<-z
attrs$node$fontsize<-16
attrs$node$fontcolor<-"black"
attrs$node$fixedsize<-F
attrs$node$height<-1.5
nAttrs$shape<-rep("ellipse",length(z))
nAttrs$shape[which(class_nodes[,"class"]=="factor")]<-"box"
names(nAttrs$shape)<-nodes(BNgraph)
col.palette<-list(pos_high="red", pos_low= "wheat1",
neg_high="cyan", neg_low = "blue",
dsep_col="white",qtl_col="grey",node_abs_col="palegreen2")
ncol=1
score=x$JSI[,ncol]
X=length(dnodes[which(dnodes[,2]=="factor"),1])
nAttrs$fillcolor<-rep(col.palette$dsep_col,length(z))
names(nAttrs$fillcolor)<-nodes(BNgraph)
score_no<-seq(floor(range(score)[1]),ceiling(range(score)[2]),length.out=col.length)
score_range<-cbind(score_no[-length(score_no)],score_no[-1])
score_int<-findInterval(score,sort(score_no))
col.length=100
score_no<-seq(floor(range(score)[1]),ceiling(range(score)[2]),length.out=col.length)
score_range<-cbind(score_no[-length(score_no)],score_no[-1])
score_int<-findInterval(score,sort(score_no))
x$NODE
x$node
colormap1<-cscale(1:(length(which(score_no<0))-1),palette=seq_gradient_pal(low=col.palette$neg_low,high=col.palette$neg_high))
colormap2<-cscale(1:(length(which(score_no>0))-1),palette=seq_gradient_pal(low=col.palette$pos_low,high=col.palette$pos_high))
colormap_network<-c(colormap1,colormap2)[score_int]
for (i in 1:length(x$node))
{
colormap_network<-c(colormap_network,col.palette$node_abs_color)
}
colormap_network<-c(colormap_network, rep(col.palette$qtl_color,length(X)))
names(colormap_network)=c(c(names(score),x$node),dnodes[which(dnodes[,2]=="factor"),1])
colormap_network
colormap_network<-c(colormap_network, rep(col.palette$qtl_col,length(X)))
colormap_network
names(colormap_network)=c(c(names(score),x$node),dnodes[which(dnodes[,2]=="factor"),1])
nAttrs$fillcolor<-colormap_network
non_dnodes<-setdiff(class_nodes[,1],names(colormap_network))
colormap<-c(c(colormap1,col.palette$dsep_col),colormap2)
c(c(names(score),x$node),dnodes[which(dnodes[,2]=="factor"),1])
length(c(c(names(score),x$node),dnodes[which(dnodes[,2]=="factor"),1]))
length(colormap_network)
colormap1<-cscale(1:(length(which(score_no<0))-1),palette=seq_gradient_pal(low=col.palette$neg_low,high=col.palette$neg_high))
colormap2<-cscale(1:(length(which(score_no>0))-1),palette=seq_gradient_pal(low=col.palette$pos_low,high=col.palette$pos_high))
colormap_network<-c(colormap1,colormap2)[score_int]
for (i in 1:length(x$node))
{
colormap_network<-c(colormap_network,col.palette$node_abs_color)
}
colormap_network<-c(colormap_network, rep(col.palette$qtl_col,length(X)))
names(colormap_network)=c(c(names(score),x$node),dnodes[which(dnodes[,2]=="factor"),1])
col.palette$node_abs_color
colormap1<-cscale(1:(length(which(score_no<0))-1),palette=seq_gradient_pal(low=col.palette$neg_low,high=col.palette$neg_high))
colormap2<-cscale(1:(length(which(score_no>0))-1),palette=seq_gradient_pal(low=col.palette$pos_low,high=col.palette$pos_high))
colormap_network<-c(colormap1,colormap2)[score_int]
for (i in 1:length(x$node))
{
colormap_network<-c(colormap_network,col.palette$node_abs_col)
}
colormap_network<-c(colormap_network, rep(col.palette$qtl_col,length(X)))
names(colormap_network)=c(c(names(score),x$node),dnodes[which(dnodes[,2]=="factor"),1])
nAttrs$fillcolor<-colormap_network
non_dnodes<-setdiff(class_nodes[,1],names(colormap_network))
colormap<-c(c(colormap1,col.palette$dsep_col),colormap2)
layout(matrix(c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,0), 4, 6, byrow = F))
plot(BNgraph, nodeAttrs=nAttrs,attrs=attrs)
scale = (length(colormap)-1)/(round(max(score_no))-round(min(score_no)))
ticks=seq(round(min(score_no)),0, len=3)
ticks<-ticks[-3]
ticks=c(ticks,seq(0,round(max(score_no)),len=3))
plot(c(0,10), c(round(min(score_no)),round(max(score_no))), type='n', bty='n', xaxt='n', xlab='', yaxt='n', ylab='')
axis(2, pos=3,ticks, las=1,font=1)
for (i in 1:(length(colormap)-1))
{
y = (i-1)/scale + round(min(score_no))
rect(3.05,y,4.05,y+(1/scale), col=colormap[i], border=NA)
}
}
data(mouse)
network<-fit.bn(geno,pheno,alpha=0.1)
mouse<-absorb.bn(network,node="Tlr12",evidence=matrix(-0.99))
plot(x=mouse,y="JSI",ncol=1)
library(gpbn)
data(mouse)
network<-fit.bn(geno,pheno,alpha=0.1)
mouse<-absorb.bn(network,node="Tlr12",evidence=matrix(-0.99))
plot(x=mouse,y="JSI",ncol=1)
library(gpbn)
data(mouse)
network<-fit.bn(geno,pheno,alpha=0.1)
mouse<-absorb.bn(network,node="Tlr12",evidence=matrix(-0.99))
plot(x=mouse,y="JSI",ncol=1)
detach("package:RHugin", unload=TRUE)
library(Rgraphviz)
edit(plot.graph)
edit(plot.raaph)
edit(plot.ragaph)
edit(plot.ragraph)
edit(as.graph.RHuginDomain)
edit(plot.RHuginDomain)
library(gpbn)
data(mouse)
network<-fit.bn(geno,pheno,alpha=0.1)
mouse<-absorb.bn(network,node="Tlr12",evidence=matrix(-0.99))
plot(x=mouse,y="JSI",ncol=1)
library(gpbn)
library(gpbn)
data(mouse)
network<-fit.bn(geno,pheno,alpha=0.1)
mouse<-absorb.bn(network,node="Tlr12",evidence=matrix(-0.99))
plot(x=mouse,y="JSI",ncol=1)
library(gpbn)
data(mouse)
network<-fit.bn(geno,pheno,alpha=0.1)
mouse<-absorb.bn(network,node="Tlr12",evidence=matrix(-0.99))
plot(x=mouse,y="JSI",ncol=1)
library(gpbn)
load("~/eQTL/Sensitivity/Hugin/gpBP/gpBP/data/mouse.rda")
load("~/eQTL/Sensitivity/Hugin/gpBP/gpBP/data/mouse.rda")
data(mouse)
library(gpBP)
data(apple)
library(RHugin)
data(aple)
data(apple)
library(gpBP)
uninstall(gpBP)
remove(gpBP)
remove.packages(gpbn)
remove.packages(gpBP)
detach("package:graphics", unload=TRUE)
detach("package:grDevices", unload=TRUE)
detach("package:grid", unload=TRUE)
detach("package:graph", unload=TRUE)
remove.packages("gpBP")
remove.packages("gpbn")
library(gpBP)
library(gpBP)
remove.packages("gpBP")
remove.packages("gpBP")
library(gpBP)
library(gpBP)
data(mouse)
data
library(help=datasets)
data(iris)
library(gpBP)
rnwfile <- system.file("Sweave", "example-1.Rnw", package = "gpBP")
Sweave(rnwfile)
rnwfile <- system.file("Sweave", "example-1.Rnw", package = "utils")
\begin{center}
<<fig=TRUE,echo=FALSE>>=
@
\end{center}
\begin{center}
<<fig=TRUE,echo=FALSE>>=
@
\end{center}
rnwfile <- system.file("Sweave", "gpBPvignette.Rnw", package = "gpBP")
remove.packages(gpBP)
remove.packages("gpBP")
data(mouse)
network<-fit.gpBP(geno,pheno,alpha=0.1)
network<-absorb.gpBP(network,node="Tlr12",evidence=matrix(-0.99))
plot(x=network)
require(gpBP)
data(mouse)
network<-fit.gpBP(geno,pheno,alpha=0.1)
network<-absorb.gpBP(network,node="Tlr12",evidence=matrix(-0.99))
plot(x=network)
remove.packages("gpBP")
remove.packages("gpBP")
data(mouse)
network<-fit.gpBP(geno,pheno,alpha=0.1)
network<-absorb.gpBP(network,node="Tlr12",evidence=matrix(-0.99))
plot(x=network)
require(gpBP)
data(mouse)
network<-fit.gpBP(geno,pheno,alpha=0.1)
network<-absorb.gpBP(network,node="Tlr12",evidence=matrix(-0.99))
plot(x=network)
install.packages("rpart")
install.packages("~/eQTL/Sensitivity/Hugin/gpBP/gpBP_1.0.tar.gz", repos = NULL, type = "source")
library("gpBP")
library(gpBP)
library(gpBP)
library(gpBP)
library(gpBP)
library(gpBP)
library(gpBP)
library("gpBP")
install.packages("~/eQTL/Sensitivity/Hugin/gpBP/temp/gpBP_1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/eQTL/Sensitivity/Hugin/gpBP/temp/gpBP_1.0.tar.gz", repos = NULL, type = "source")
library(gpBP)
library("gpBP")
.libPaths()
library("gpBP")
clc
\SweaveOpts{concordance=FALSE}
\noindent In summary, belief propagation is a promising avenue for \emph{post hoc} analyses of an inferred phenotype-genotype network.  Graphical modeling approaches to the interpretation of the data offer valuable perspective, which hold promise for personalized medicine.  We have proposed a paradigm and supporting software which enables computation and visualization of \emph{in silico} predictions of the system-wide response of perturbation.  This work represents a first step toward alleviating longstanding issues associated with model interpretation of genotype-phenotype networks.  Insights provide a new layer of information, which may guide future research efforts and experiments.
install.packages("bnstruct")
library(bnstruct)
install.packages("bnstruct")
library(geneNetBP)
data(mouse)
data(toy)
load("~/eQTL/Sensitivity/Hugin/geneNetBP/Oct 2015/geneNetBP/data/toy.rda")
toygeno<-geno
toypheno<-pheno
setwd("~/eQTL/Sensitivity/Hugin/geneNetBP/Oct 2015/geneNetBP/data")
save(toygeno,toypheno,file="toy.rda")
load("~/eQTL/Sensitivity/Hugin/geneNetBP/Oct 2015/geneNetBP/data/toy.rda")
load("~/eQTL/Sensitivity/Hugin/geneNetBP/Oct 2015/geneNetBP/data/toy.rda")
detach("package:Rgraphviz", unload=TRUE)
detach("package:RHugin", unload=TRUE)
update.packages("scales")
scales
library(scales)
